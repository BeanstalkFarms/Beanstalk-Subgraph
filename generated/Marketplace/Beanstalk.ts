// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BeanAllocation extends ethereum.Event {
  get params(): BeanAllocation__Params {
    return new BeanAllocation__Params(this);
  }
}

export class BeanAllocation__Params {
  _event: BeanAllocation;

  constructor(event: BeanAllocation) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get beans(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BeanClaim extends ethereum.Event {
  get params(): BeanClaim__Params {
    return new BeanClaim__Params(this);
  }
}

export class BeanClaim__Params {
  _event: BeanClaim;

  constructor(event: BeanClaim) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get withdrawals(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get beans(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EtherClaim extends ethereum.Event {
  get params(): EtherClaim__Params {
    return new EtherClaim__Params(this);
  }
}

export class EtherClaim__Params {
  _event: EtherClaim;

  constructor(event: EtherClaim) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ethereum(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Harvest extends ethereum.Event {
  get params(): Harvest__Params {
    return new Harvest__Params(this);
  }
}

export class Harvest__Params {
  _event: Harvest;

  constructor(event: Harvest) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get plots(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get beans(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LPClaim extends ethereum.Event {
  get params(): LPClaim__Params {
    return new LPClaim__Params(this);
  }
}

export class LPClaim__Params {
  _event: LPClaim;

  constructor(event: LPClaim) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get withdrawals(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get lp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BeanRemove extends ethereum.Event {
  get params(): BeanRemove__Params {
    return new BeanRemove__Params(this);
  }
}

export class BeanRemove__Params {
  _event: BeanRemove;

  constructor(event: BeanRemove) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get crates(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get crateBeans(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get beans(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LPDeposit extends ethereum.Event {
  get params(): LPDeposit__Params {
    return new LPDeposit__Params(this);
  }
}

export class LPDeposit__Params {
  _event: LPDeposit;

  constructor(event: LPDeposit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get seeds(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LPRemove extends ethereum.Event {
  get params(): LPRemove__Params {
    return new LPRemove__Params(this);
  }
}

export class LPRemove__Params {
  _event: LPRemove;

  constructor(event: LPRemove) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get crates(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get crateLP(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get lp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DiamondCut extends ethereum.Event {
  get params(): DiamondCut__Params {
    return new DiamondCut__Params(this);
  }
}

export class DiamondCut__Params {
  _event: DiamondCut;

  constructor(event: DiamondCut) {
    this._event = event;
  }

  get _diamondCut(): Array<DiamondCut_diamondCutStruct> {
    return this._event.parameters[0].value.toTupleArray<
      DiamondCut_diamondCutStruct
    >();
  }

  get _init(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _calldata(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class DiamondCut_diamondCutStruct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get action(): i32 {
    return this[1].toI32();
  }

  get functionSelectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class Sow extends ethereum.Event {
  get params(): Sow__Params {
    return new Sow__Params(this);
  }
}

export class Sow__Params {
  _event: Sow;

  constructor(event: Sow) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get beans(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get pods(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CompleteFundraiser extends ethereum.Event {
  get params(): CompleteFundraiser__Params {
    return new CompleteFundraiser__Params(this);
  }
}

export class CompleteFundraiser__Params {
  _event: CompleteFundraiser;

  constructor(event: CompleteFundraiser) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class CreateFundraiser extends ethereum.Event {
  get params(): CreateFundraiser__Params {
    return new CreateFundraiser__Params(this);
  }
}

export class CreateFundraiser__Params {
  _event: CreateFundraiser;

  constructor(event: CreateFundraiser) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get fundraiser(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FundFundraiser extends ethereum.Event {
  get params(): FundFundraiser__Params {
    return new FundFundraiser__Params(this);
  }
}

export class FundFundraiser__Params {
  _event: FundFundraiser;

  constructor(event: FundFundraiser) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Sow1 extends ethereum.Event {
  get params(): Sow1__Params {
    return new Sow1__Params(this);
  }
}

export class Sow1__Params {
  _event: Sow1;

  constructor(event: Sow1) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get beans(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get pods(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Commit extends ethereum.Event {
  get params(): Commit__Params {
    return new Commit__Params(this);
  }
}

export class Commit__Params {
  _event: Commit;

  constructor(event: Commit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bip(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Incentivization extends ethereum.Event {
  get params(): Incentivization__Params {
    return new Incentivization__Params(this);
  }
}

export class Incentivization__Params {
  _event: Incentivization;

  constructor(event: Incentivization) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get beans(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Pause extends ethereum.Event {
  get params(): Pause__Params {
    return new Pause__Params(this);
  }
}

export class Pause__Params {
  _event: Pause;

  constructor(event: Pause) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Proposal extends ethereum.Event {
  get params(): Proposal__Params {
    return new Proposal__Params(this);
  }
}

export class Proposal__Params {
  _event: Proposal;

  constructor(event: Proposal) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bip(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get start(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get period(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Unpause extends ethereum.Event {
  get params(): Unpause__Params {
    return new Unpause__Params(this);
  }
}

export class Unpause__Params {
  _event: Unpause;

  constructor(event: Unpause) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timePassed(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unvote extends ethereum.Event {
  get params(): Unvote__Params {
    return new Unvote__Params(this);
  }
}

export class Unvote__Params {
  _event: Unvote;

  constructor(event: Unvote) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bip(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get roots(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Vote extends ethereum.Event {
  get params(): Vote__Params {
    return new Vote__Params(this);
  }
}

export class Vote__Params {
  _event: Vote;

  constructor(event: Vote) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bip(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get roots(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VoteList extends ethereum.Event {
  get params(): VoteList__Params {
    return new VoteList__Params(this);
  }
}

export class VoteList__Params {
  _event: VoteList;

  constructor(event: VoteList) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bips(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get votes(): Array<boolean> {
    return this._event.parameters[2].value.toBooleanArray();
  }

  get roots(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PlotTransfer extends ethereum.Event {
  get params(): PlotTransfer__Params {
    return new PlotTransfer__Params(this);
  }
}

export class PlotTransfer__Params {
  _event: PlotTransfer;

  constructor(event: PlotTransfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get pods(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PodApproval extends ethereum.Event {
  get params(): PodApproval__Params {
    return new PodApproval__Params(this);
  }
}

export class PodApproval__Params {
  _event: PodApproval;

  constructor(event: PodApproval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pods(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PodListingCancelled extends ethereum.Event {
  get params(): PodListingCancelled__Params {
    return new PodListingCancelled__Params(this);
  }
}

export class PodListingCancelled__Params {
  _event: PodListingCancelled;

  constructor(event: PodListingCancelled) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PodListingCreated extends ethereum.Event {
  get params(): PodListingCreated__Params {
    return new PodListingCreated__Params(this);
  }
}

export class PodListingCreated__Params {
  _event: PodListingCreated;

  constructor(event: PodListingCreated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get start(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get pricePerPod(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get maxHarvestableIndex(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get toWallet(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class PodListingFilled extends ethereum.Event {
  get params(): PodListingFilled__Params {
    return new PodListingFilled__Params(this);
  }
}

export class PodListingFilled__Params {
  _event: PodListingFilled;

  constructor(event: PodListingFilled) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get start(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PodOrderCancelled extends ethereum.Event {
  get params(): PodOrderCancelled__Params {
    return new PodOrderCancelled__Params(this);
  }
}

export class PodOrderCancelled__Params {
  _event: PodOrderCancelled;

  constructor(event: PodOrderCancelled) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class PodOrderCreated extends ethereum.Event {
  get params(): PodOrderCreated__Params {
    return new PodOrderCreated__Params(this);
  }
}

export class PodOrderCreated__Params {
  _event: PodOrderCreated;

  constructor(event: PodOrderCreated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get pricePerPod(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get maxPlaceInLine(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PodOrderFilled extends ethereum.Event {
  get params(): PodOrderFilled__Params {
    return new PodOrderFilled__Params(this);
  }
}

export class PodOrderFilled__Params {
  _event: PodOrderFilled;

  constructor(event: PodOrderFilled) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get index(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get start(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Incentivization1 extends ethereum.Event {
  get params(): Incentivization1__Params {
    return new Incentivization1__Params(this);
  }
}

export class Incentivization1__Params {
  _event: Incentivization1;

  constructor(event: Incentivization1) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get beans(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SeasonOfPlenty extends ethereum.Event {
  get params(): SeasonOfPlenty__Params {
    return new SeasonOfPlenty__Params(this);
  }
}

export class SeasonOfPlenty__Params {
  _event: SeasonOfPlenty;

  constructor(event: SeasonOfPlenty) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get eth(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get harvestable(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SeasonSnapshot extends ethereum.Event {
  get params(): SeasonSnapshot__Params {
    return new SeasonSnapshot__Params(this);
  }
}

export class SeasonSnapshot__Params {
  _event: SeasonSnapshot;

  constructor(event: SeasonSnapshot) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get supply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get stalk(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get seeds(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get podIndex(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get harvestableIndex(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Sunrise extends ethereum.Event {
  get params(): Sunrise__Params {
    return new Sunrise__Params(this);
  }
}

export class Sunrise__Params {
  _event: Sunrise;

  constructor(event: Sunrise) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SupplyDecrease extends ethereum.Event {
  get params(): SupplyDecrease__Params {
    return new SupplyDecrease__Params(this);
  }
}

export class SupplyDecrease__Params {
  _event: SupplyDecrease;

  constructor(event: SupplyDecrease) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newSoil(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SupplyIncrease extends ethereum.Event {
  get params(): SupplyIncrease__Params {
    return new SupplyIncrease__Params(this);
  }
}

export class SupplyIncrease__Params {
  _event: SupplyIncrease;

  constructor(event: SupplyIncrease) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newHarvestable(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newSilo(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newSoil(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SupplyNeutral extends ethereum.Event {
  get params(): SupplyNeutral__Params {
    return new SupplyNeutral__Params(this);
  }
}

export class SupplyNeutral__Params {
  _event: SupplyNeutral;

  constructor(event: SupplyNeutral) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newSoil(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WeatherChange extends ethereum.Event {
  get params(): WeatherChange__Params {
    return new WeatherChange__Params(this);
  }
}

export class WeatherChange__Params {
  _event: WeatherChange;

  constructor(event: WeatherChange) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get caseId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get change(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class BeanAllocation1 extends ethereum.Event {
  get params(): BeanAllocation1__Params {
    return new BeanAllocation1__Params(this);
  }
}

export class BeanAllocation1__Params {
  _event: BeanAllocation1;

  constructor(event: BeanAllocation1) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get beans(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BeanDeposit extends ethereum.Event {
  get params(): BeanDeposit__Params {
    return new BeanDeposit__Params(this);
  }
}

export class BeanDeposit__Params {
  _event: BeanDeposit;

  constructor(event: BeanDeposit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get beans(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BeanRemove1 extends ethereum.Event {
  get params(): BeanRemove1__Params {
    return new BeanRemove1__Params(this);
  }
}

export class BeanRemove1__Params {
  _event: BeanRemove1;

  constructor(event: BeanRemove1) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get crates(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get crateBeans(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get beans(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BeanWithdraw extends ethereum.Event {
  get params(): BeanWithdraw__Params {
    return new BeanWithdraw__Params(this);
  }
}

export class BeanWithdraw__Params {
  _event: BeanWithdraw;

  constructor(event: BeanWithdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get beans(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LPDeposit1 extends ethereum.Event {
  get params(): LPDeposit1__Params {
    return new LPDeposit1__Params(this);
  }
}

export class LPDeposit1__Params {
  _event: LPDeposit1;

  constructor(event: LPDeposit1) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get seeds(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LPRemove1 extends ethereum.Event {
  get params(): LPRemove1__Params {
    return new LPRemove1__Params(this);
  }
}

export class LPRemove1__Params {
  _event: LPRemove1;

  constructor(event: LPRemove1) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get crates(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get crateLP(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get lp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LPWithdraw extends ethereum.Event {
  get params(): LPWithdraw__Params {
    return new LPWithdraw__Params(this);
  }
}

export class LPWithdraw__Params {
  _event: LPWithdraw;

  constructor(event: LPWithdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BeanAllocation2 extends ethereum.Event {
  get params(): BeanAllocation2__Params {
    return new BeanAllocation2__Params(this);
  }
}

export class BeanAllocation2__Params {
  _event: BeanAllocation2;

  constructor(event: BeanAllocation2) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get beans(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ClaimSeason extends ethereum.Event {
  get params(): ClaimSeason__Params {
    return new ClaimSeason__Params(this);
  }
}

export class ClaimSeason__Params {
  _event: ClaimSeason;

  constructor(event: ClaimSeason) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ClaimSeasons extends ethereum.Event {
  get params(): ClaimSeasons__Params {
    return new ClaimSeasons__Params(this);
  }
}

export class ClaimSeasons__Params {
  _event: ClaimSeasons;

  constructor(event: ClaimSeasons) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get seasons(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get bdv(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RemoveSeason extends ethereum.Event {
  get params(): RemoveSeason__Params {
    return new RemoveSeason__Params(this);
  }
}

export class RemoveSeason__Params {
  _event: RemoveSeason;

  constructor(event: RemoveSeason) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RemoveSeasons extends ethereum.Event {
  get params(): RemoveSeasons__Params {
    return new RemoveSeasons__Params(this);
  }
}

export class RemoveSeasons__Params {
  _event: RemoveSeasons;

  constructor(event: RemoveSeasons) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get seasons(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Beanstalk__facetsResultFacets_Struct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get functionSelectors(): Array<Bytes> {
    return this[1].toBytesArray();
  }
}

export class Beanstalk__claimAndSowBeansInputClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class Beanstalk__claimAndSowBeansWithMinInputClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class Beanstalk__fundraiserResultValue0Struct extends ethereum.Tuple {
  get payee(): Address {
    return this[0].toAddress();
  }

  get token(): Address {
    return this[1].toAddress();
  }

  get total(): BigInt {
    return this[2].toBigInt();
  }

  get remaining(): BigInt {
    return this[3].toBigInt();
  }

  get start(): BigInt {
    return this[4].toBigInt();
  }
}

export class Beanstalk__bipResultValue0Struct extends ethereum.Tuple {
  get proposer(): Address {
    return this[0].toAddress();
  }

  get start(): BigInt {
    return this[1].toBigInt();
  }

  get period(): BigInt {
    return this[2].toBigInt();
  }

  get executed(): boolean {
    return this[3].toBoolean();
  }

  get pauseOrUnpause(): BigInt {
    return this[4].toBigInt();
  }

  get timestamp(): BigInt {
    return this[5].toBigInt();
  }

  get roots(): BigInt {
    return this[6].toBigInt();
  }

  get endTotalRoots(): BigInt {
    return this[7].toBigInt();
  }
}

export class Beanstalk__bipDiamondCutResultValue0Struct extends ethereum.Tuple {
  get diamondCut(): Array<
    Beanstalk__bipDiamondCutResultValue0DiamondCutStruct
  > {
    return this[0].toTupleArray<
      Beanstalk__bipDiamondCutResultValue0DiamondCutStruct
    >();
  }

  get initAddress(): Address {
    return this[1].toAddress();
  }

  get initData(): Bytes {
    return this[2].toBytes();
  }
}

export class Beanstalk__bipDiamondCutResultValue0DiamondCutStruct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get action(): i32 {
    return this[1].toI32();
  }

  get functionSelectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class Beanstalk__bipFacetCutsResultValue0Struct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get action(): i32 {
    return this[1].toI32();
  }

  get functionSelectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class Beanstalk__claimAndCreatePodOrderInputClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class Beanstalk__captureResultValue0Struct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class Beanstalk__captureResultValue1Struct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class Beanstalk__captureResult {
  value0: Beanstalk__captureResultValue0Struct;
  value1: Beanstalk__captureResultValue1Struct;

  constructor(
    value0: Beanstalk__captureResultValue0Struct,
    value1: Beanstalk__captureResultValue1Struct
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getValue0(): Beanstalk__captureResultValue0Struct {
    return this.value0;
  }

  getValue1(): Beanstalk__captureResultValue1Struct {
    return this.value1;
  }
}

export class Beanstalk__getTWAPPricesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Beanstalk__lockedReservesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Beanstalk__pegReservesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Beanstalk__rainResultValue0Struct extends ethereum.Tuple {
  get start(): BigInt {
    return this[0].toBigInt();
  }

  get raining(): boolean {
    return this[1].toBoolean();
  }

  get pods(): BigInt {
    return this[2].toBigInt();
  }

  get roots(): BigInt {
    return this[3].toBigInt();
  }
}

export class Beanstalk__reservesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Beanstalk__timeResultValue0Struct extends ethereum.Tuple {
  get current(): BigInt {
    return this[0].toBigInt();
  }

  get sis(): BigInt {
    return this[1].toBigInt();
  }

  get withdrawSeasons(): i32 {
    return this[2].toI32();
  }

  get start(): BigInt {
    return this[3].toBigInt();
  }

  get period(): BigInt {
    return this[4].toBigInt();
  }

  get timestamp(): BigInt {
    return this[5].toBigInt();
  }
}

export class Beanstalk__weatherResultValue0Struct extends ethereum.Tuple {
  get startSoil(): BigInt {
    return this[0].toBigInt();
  }

  get lastDSoil(): BigInt {
    return this[1].toBigInt();
  }

  get lastSoilPercent(): BigInt {
    return this[2].toBigInt();
  }

  get lastSowTime(): BigInt {
    return this[3].toBigInt();
  }

  get nextSowTime(): BigInt {
    return this[4].toBigInt();
  }

  get weatherYield(): BigInt {
    return this[5].toBigInt();
  }

  get didSowBelowMin(): boolean {
    return this[6].toBoolean();
  }

  get didSowFaster(): boolean {
    return this[7].toBoolean();
  }
}

export class Beanstalk__legacySupplyIncreaseResultValue0Struct extends ethereum.Tuple {
  get beans(): BigInt {
    return this[0].toBigInt();
  }

  get stalk(): BigInt {
    return this[1].toBigInt();
  }

  get roots(): BigInt {
    return this[2].toBigInt();
  }
}

export class Beanstalk__lpDepositResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Beanstalk__seasonsOfPlentyResultValue0Struct extends ethereum.Tuple {
  get weth(): BigInt {
    return this[0].toBigInt();
  }

  get base(): BigInt {
    return this[1].toBigInt();
  }

  get last(): BigInt {
    return this[2].toBigInt();
  }
}

export class Beanstalk__getDepositResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Beanstalk__tokenSettingsResultValue0Struct extends ethereum.Tuple {
  get selector(): Bytes {
    return this[0].toBytes();
  }

  get seeds(): BigInt {
    return this[1].toBigInt();
  }

  get stalk(): BigInt {
    return this[2].toBigInt();
  }
}

export class Beanstalk extends ethereum.SmartContract {
  static bind(address: Address): Beanstalk {
    return new Beanstalk("Beanstalk", address);
  }

  mockToBDV(amount: BigInt): BigInt {
    let result = super.call("mockToBDV", "mockToBDV(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_mockToBDV(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mockToBDV", "mockToBDV(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  beansPerFertilizer(): BigInt {
    let result = super.call(
      "beansPerFertilizer",
      "beansPerFertilizer():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_beansPerFertilizer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "beansPerFertilizer",
      "beansPerFertilizer():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unwrapBeans(amount: BigInt): BigInt {
    let result = super.call("unwrapBeans", "unwrapBeans(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_unwrapBeans(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unwrapBeans",
      "unwrapBeans(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wrappedBeans(user: Address): BigInt {
    let result = super.call("wrappedBeans", "wrappedBeans(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_wrappedBeans(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "wrappedBeans",
      "wrappedBeans(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  beansToPeg(): BigInt {
    let result = super.call("beansToPeg", "beansToPeg():(uint256)", []);

    return result[0].toBigInt();
  }

  try_beansToPeg(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("beansToPeg", "beansToPeg():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpToPeg(): BigInt {
    let result = super.call("lpToPeg", "lpToPeg():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lpToPeg(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lpToPeg", "lpToPeg():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  curveToBDV(amount: BigInt): BigInt {
    let result = super.call("curveToBDV", "curveToBDV(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_curveToBDV(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("curveToBDV", "curveToBDV(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  facetAddress(_functionSelector: Bytes): Address {
    let result = super.call("facetAddress", "facetAddress(bytes4):(address)", [
      ethereum.Value.fromFixedBytes(_functionSelector)
    ]);

    return result[0].toAddress();
  }

  try_facetAddress(_functionSelector: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "facetAddress",
      "facetAddress(bytes4):(address)",
      [ethereum.Value.fromFixedBytes(_functionSelector)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  facetAddresses(): Array<Address> {
    let result = super.call(
      "facetAddresses",
      "facetAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_facetAddresses(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "facetAddresses",
      "facetAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  facetFunctionSelectors(_facet: Address): Array<Bytes> {
    let result = super.call(
      "facetFunctionSelectors",
      "facetFunctionSelectors(address):(bytes4[])",
      [ethereum.Value.fromAddress(_facet)]
    );

    return result[0].toBytesArray();
  }

  try_facetFunctionSelectors(
    _facet: Address
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "facetFunctionSelectors",
      "facetFunctionSelectors(address):(bytes4[])",
      [ethereum.Value.fromAddress(_facet)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  facets(): Array<Beanstalk__facetsResultFacets_Struct> {
    let result = super.call("facets", "facets():((address,bytes4[])[])", []);

    return result[0].toTupleArray<Beanstalk__facetsResultFacets_Struct>();
  }

  try_facets(): ethereum.CallResult<
    Array<Beanstalk__facetsResultFacets_Struct>
  > {
    let result = super.tryCall("facets", "facets():((address,bytes4[])[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Beanstalk__facetsResultFacets_Struct>()
    );
  }

  supportsInterface(_interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(_interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  claimAndSowBeans(
    amount: BigInt,
    claim: Beanstalk__claimAndSowBeansInputClaimStruct
  ): BigInt {
    let result = super.call(
      "claimAndSowBeans",
      "claimAndSowBeans(uint256,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool)):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromTuple(claim)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimAndSowBeans(
    amount: BigInt,
    claim: Beanstalk__claimAndSowBeansInputClaimStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimAndSowBeans",
      "claimAndSowBeans(uint256,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool)):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromTuple(claim)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimAndSowBeansWithMin(
    amount: BigInt,
    minAmount: BigInt,
    claim: Beanstalk__claimAndSowBeansWithMinInputClaimStruct
  ): BigInt {
    let result = super.call(
      "claimAndSowBeansWithMin",
      "claimAndSowBeansWithMin(uint256,uint256,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool)):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minAmount),
        ethereum.Value.fromTuple(claim)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimAndSowBeansWithMin(
    amount: BigInt,
    minAmount: BigInt,
    claim: Beanstalk__claimAndSowBeansWithMinInputClaimStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimAndSowBeansWithMin",
      "claimAndSowBeansWithMin(uint256,uint256,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool)):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minAmount),
        ethereum.Value.fromTuple(claim)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  harvestableIndex(): BigInt {
    let result = super.call(
      "harvestableIndex",
      "harvestableIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_harvestableIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "harvestableIndex",
      "harvestableIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  harvestedIndex(): BigInt {
    let result = super.call("harvestedIndex", "harvestedIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_harvestedIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "harvestedIndex",
      "harvestedIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  plot(account: Address, plotId: BigInt): BigInt {
    let result = super.call("plot", "plot(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);

    return result[0].toBigInt();
  }

  try_plot(account: Address, plotId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("plot", "plot(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  podIndex(): BigInt {
    let result = super.call("podIndex", "podIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_podIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("podIndex", "podIndex():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sowBeans(amount: BigInt): BigInt {
    let result = super.call("sowBeans", "sowBeans(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_sowBeans(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sowBeans", "sowBeans(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sowBeansWithMin(amount: BigInt, minAmount: BigInt): BigInt {
    let result = super.call(
      "sowBeansWithMin",
      "sowBeansWithMin(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_sowBeansWithMin(
    amount: BigInt,
    minAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sowBeansWithMin",
      "sowBeansWithMin(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalHarvestable(): BigInt {
    let result = super.call(
      "totalHarvestable",
      "totalHarvestable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalHarvestable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalHarvestable",
      "totalHarvestable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPods(): BigInt {
    let result = super.call("totalPods", "totalPods():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalPods(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalPods", "totalPods():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSoil(): BigInt {
    let result = super.call("totalSoil", "totalSoil():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSoil(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSoil", "totalSoil():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUnripenedPods(): BigInt {
    let result = super.call(
      "totalUnripenedPods",
      "totalUnripenedPods():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalUnripenedPods(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUnripenedPods",
      "totalUnripenedPods():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fund(id: BigInt, amount: BigInt): BigInt {
    let result = super.call("fund", "fund(uint32,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_fund(id: BigInt, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fund", "fund(uint32,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fundingToken(id: BigInt): Address {
    let result = super.call("fundingToken", "fundingToken(uint32):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toAddress();
  }

  try_fundingToken(id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fundingToken",
      "fundingToken(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundraiser(id: BigInt): Beanstalk__fundraiserResultValue0Struct {
    let result = super.call(
      "fundraiser",
      "fundraiser(uint32):((address,address,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return changetype<Beanstalk__fundraiserResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_fundraiser(
    id: BigInt
  ): ethereum.CallResult<Beanstalk__fundraiserResultValue0Struct> {
    let result = super.tryCall(
      "fundraiser",
      "fundraiser(uint32):((address,address,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__fundraiserResultValue0Struct>(value[0].toTuple())
    );
  }

  numberOfFundraisers(): BigInt {
    let result = super.call(
      "numberOfFundraisers",
      "numberOfFundraisers():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberOfFundraisers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfFundraisers",
      "numberOfFundraisers():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  remainingFunding(id: BigInt): BigInt {
    let result = super.call(
      "remainingFunding",
      "remainingFunding(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_remainingFunding(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "remainingFunding",
      "remainingFunding(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFunding(id: BigInt): BigInt {
    let result = super.call("totalFunding", "totalFunding(uint32):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_totalFunding(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFunding",
      "totalFunding(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activeBips(): Array<BigInt> {
    let result = super.call("activeBips", "activeBips():(uint32[])", []);

    return result[0].toBigIntArray();
  }

  try_activeBips(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("activeBips", "activeBips():(uint32[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  bip(bipId: BigInt): Beanstalk__bipResultValue0Struct {
    let result = super.call(
      "bip",
      "bip(uint32):((address,uint32,uint32,bool,int256,uint128,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(bipId)]
    );

    return changetype<Beanstalk__bipResultValue0Struct>(result[0].toTuple());
  }

  try_bip(
    bipId: BigInt
  ): ethereum.CallResult<Beanstalk__bipResultValue0Struct> {
    let result = super.tryCall(
      "bip",
      "bip(uint32):((address,uint32,uint32,bool,int256,uint128,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(bipId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__bipResultValue0Struct>(value[0].toTuple())
    );
  }

  bipDiamondCut(bipId: BigInt): Beanstalk__bipDiamondCutResultValue0Struct {
    let result = super.call(
      "bipDiamondCut",
      "bipDiamondCut(uint32):(((address,uint8,bytes4[])[],address,bytes))",
      [ethereum.Value.fromUnsignedBigInt(bipId)]
    );

    return changetype<Beanstalk__bipDiamondCutResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_bipDiamondCut(
    bipId: BigInt
  ): ethereum.CallResult<Beanstalk__bipDiamondCutResultValue0Struct> {
    let result = super.tryCall(
      "bipDiamondCut",
      "bipDiamondCut(uint32):(((address,uint8,bytes4[])[],address,bytes))",
      [ethereum.Value.fromUnsignedBigInt(bipId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__bipDiamondCutResultValue0Struct>(value[0].toTuple())
    );
  }

  bipFacetCuts(
    bipId: BigInt
  ): Array<Beanstalk__bipFacetCutsResultValue0Struct> {
    let result = super.call(
      "bipFacetCuts",
      "bipFacetCuts(uint32):((address,uint8,bytes4[])[])",
      [ethereum.Value.fromUnsignedBigInt(bipId)]
    );

    return result[0].toTupleArray<Beanstalk__bipFacetCutsResultValue0Struct>();
  }

  try_bipFacetCuts(
    bipId: BigInt
  ): ethereum.CallResult<Array<Beanstalk__bipFacetCutsResultValue0Struct>> {
    let result = super.tryCall(
      "bipFacetCuts",
      "bipFacetCuts(uint32):((address,uint8,bytes4[])[])",
      [ethereum.Value.fromUnsignedBigInt(bipId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Beanstalk__bipFacetCutsResultValue0Struct>()
    );
  }

  numberOfBips(): BigInt {
    let result = super.call("numberOfBips", "numberOfBips():(uint32)", []);

    return result[0].toBigInt();
  }

  try_numberOfBips(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numberOfBips", "numberOfBips():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rootsFor(bipId: BigInt): BigInt {
    let result = super.call("rootsFor", "rootsFor(uint32):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(bipId)
    ]);

    return result[0].toBigInt();
  }

  try_rootsFor(bipId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rootsFor", "rootsFor(uint32):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(bipId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  voted(account: Address, bipId: BigInt): boolean {
    let result = super.call("voted", "voted(address,uint32):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(bipId)
    ]);

    return result[0].toBoolean();
  }

  try_voted(account: Address, bipId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("voted", "voted(address,uint32):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(bipId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowancePods(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowancePods",
      "allowancePods(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowancePods(
    owner: Address,
    spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowancePods",
      "allowancePods(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimAndCreatePodOrder(
    beanAmount: BigInt,
    pricePerPod: i32,
    maxPlaceInLine: BigInt,
    claim: Beanstalk__claimAndCreatePodOrderInputClaimStruct
  ): Bytes {
    let result = super.call(
      "claimAndCreatePodOrder",
      "claimAndCreatePodOrder(uint256,uint24,uint232,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool)):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(beanAmount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pricePerPod)),
        ethereum.Value.fromUnsignedBigInt(maxPlaceInLine),
        ethereum.Value.fromTuple(claim)
      ]
    );

    return result[0].toBytes();
  }

  try_claimAndCreatePodOrder(
    beanAmount: BigInt,
    pricePerPod: i32,
    maxPlaceInLine: BigInt,
    claim: Beanstalk__claimAndCreatePodOrderInputClaimStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "claimAndCreatePodOrder",
      "claimAndCreatePodOrder(uint256,uint24,uint232,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool)):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(beanAmount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pricePerPod)),
        ethereum.Value.fromUnsignedBigInt(maxPlaceInLine),
        ethereum.Value.fromTuple(claim)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  createPodOrder(
    beanAmount: BigInt,
    pricePerPod: i32,
    maxPlaceInLine: BigInt
  ): Bytes {
    let result = super.call(
      "createPodOrder",
      "createPodOrder(uint256,uint24,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(beanAmount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pricePerPod)),
        ethereum.Value.fromUnsignedBigInt(maxPlaceInLine)
      ]
    );

    return result[0].toBytes();
  }

  try_createPodOrder(
    beanAmount: BigInt,
    pricePerPod: i32,
    maxPlaceInLine: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "createPodOrder",
      "createPodOrder(uint256,uint24,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(beanAmount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pricePerPod)),
        ethereum.Value.fromUnsignedBigInt(maxPlaceInLine)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  podListing(index: BigInt): Bytes {
    let result = super.call("podListing", "podListing(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBytes();
  }

  try_podListing(index: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("podListing", "podListing(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  podOrder(account: Address, pricePerPod: i32, maxPlaceInLine: BigInt): BigInt {
    let result = super.call(
      "podOrder",
      "podOrder(address,uint24,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pricePerPod)),
        ethereum.Value.fromUnsignedBigInt(maxPlaceInLine)
      ]
    );

    return result[0].toBigInt();
  }

  try_podOrder(
    account: Address,
    pricePerPod: i32,
    maxPlaceInLine: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "podOrder",
      "podOrder(address,uint24,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pricePerPod)),
        ethereum.Value.fromUnsignedBigInt(maxPlaceInLine)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  podOrderById(id: Bytes): BigInt {
    let result = super.call("podOrderById", "podOrderById(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(id)
    ]);

    return result[0].toBigInt();
  }

  try_podOrderById(id: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "podOrderById",
      "podOrderById(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  capture(): Beanstalk__captureResult {
    let result = super.call("capture", "capture():((uint256),(uint256))", []);

    return changetype<Beanstalk__captureResult>(
      new Beanstalk__captureResult(
        changetype<Beanstalk__captureResultValue0Struct>(result[0].toTuple()),
        changetype<Beanstalk__captureResultValue1Struct>(result[1].toTuple())
      )
    );
  }

  try_capture(): ethereum.CallResult<Beanstalk__captureResult> {
    let result = super.tryCall(
      "capture",
      "capture():((uint256),(uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__captureResult>(
        new Beanstalk__captureResult(
          changetype<Beanstalk__captureResultValue0Struct>(value[0].toTuple()),
          changetype<Beanstalk__captureResultValue1Struct>(value[1].toTuple())
        )
      )
    );
  }

  getTWAPPrices(): Beanstalk__getTWAPPricesResult {
    let result = super.call(
      "getTWAPPrices",
      "getTWAPPrices():(uint256,uint256)",
      []
    );

    return new Beanstalk__getTWAPPricesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getTWAPPrices(): ethereum.CallResult<Beanstalk__getTWAPPricesResult> {
    let result = super.tryCall(
      "getTWAPPrices",
      "getTWAPPrices():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Beanstalk__getTWAPPricesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bean(): Address {
    let result = super.call("bean", "bean():(address)", []);

    return result[0].toAddress();
  }

  try_bean(): ethereum.CallResult<Address> {
    let result = super.tryCall("bean", "bean():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lockedReserves(): Beanstalk__lockedReservesResult {
    let result = super.call(
      "lockedReserves",
      "lockedReserves():(uint256,uint256)",
      []
    );

    return new Beanstalk__lockedReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_lockedReserves(): ethereum.CallResult<Beanstalk__lockedReservesResult> {
    let result = super.tryCall(
      "lockedReserves",
      "lockedReserves():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Beanstalk__lockedReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  pair(): Address {
    let result = super.call("pair", "pair():(address)", []);

    return result[0].toAddress();
  }

  try_pair(): ethereum.CallResult<Address> {
    let result = super.tryCall("pair", "pair():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pegPair(): Address {
    let result = super.call("pegPair", "pegPair():(address)", []);

    return result[0].toAddress();
  }

  try_pegPair(): ethereum.CallResult<Address> {
    let result = super.tryCall("pegPair", "pegPair():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pegReserves(): Beanstalk__pegReservesResult {
    let result = super.call(
      "pegReserves",
      "pegReserves():(uint256,uint256)",
      []
    );

    return new Beanstalk__pegReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_pegReserves(): ethereum.CallResult<Beanstalk__pegReservesResult> {
    let result = super.tryCall(
      "pegReserves",
      "pegReserves():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Beanstalk__pegReservesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  rain(): Beanstalk__rainResultValue0Struct {
    let result = super.call(
      "rain",
      "rain():((uint32,bool,uint256,uint256))",
      []
    );

    return changetype<Beanstalk__rainResultValue0Struct>(result[0].toTuple());
  }

  try_rain(): ethereum.CallResult<Beanstalk__rainResultValue0Struct> {
    let result = super.tryCall(
      "rain",
      "rain():((uint32,bool,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__rainResultValue0Struct>(value[0].toTuple())
    );
  }

  reserves(): Beanstalk__reservesResult {
    let result = super.call("reserves", "reserves():(uint256,uint256)", []);

    return new Beanstalk__reservesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_reserves(): ethereum.CallResult<Beanstalk__reservesResult> {
    let result = super.tryCall("reserves", "reserves():(uint256,uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Beanstalk__reservesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  season(): BigInt {
    let result = super.call("season", "season():(uint32)", []);

    return result[0].toBigInt();
  }

  try_season(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("season", "season():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seasonOfPlenty(_s: BigInt): BigInt {
    let result = super.call(
      "seasonOfPlenty",
      "seasonOfPlenty(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_s)]
    );

    return result[0].toBigInt();
  }

  try_seasonOfPlenty(_s: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "seasonOfPlenty",
      "seasonOfPlenty(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_s)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seasonTime(): BigInt {
    let result = super.call("seasonTime", "seasonTime():(uint32)", []);

    return result[0].toBigInt();
  }

  try_seasonTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("seasonTime", "seasonTime():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  time(): Beanstalk__timeResultValue0Struct {
    let result = super.call(
      "time",
      "time():((uint32,uint32,uint8,uint256,uint256,uint256))",
      []
    );

    return changetype<Beanstalk__timeResultValue0Struct>(result[0].toTuple());
  }

  try_time(): ethereum.CallResult<Beanstalk__timeResultValue0Struct> {
    let result = super.tryCall(
      "time",
      "time():((uint32,uint32,uint8,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__timeResultValue0Struct>(value[0].toTuple())
    );
  }

  weather(): Beanstalk__weatherResultValue0Struct {
    let result = super.call(
      "weather",
      "weather():((uint256,uint256,uint96,uint32,uint32,uint32,bool,bool))",
      []
    );

    return changetype<Beanstalk__weatherResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_weather(): ethereum.CallResult<Beanstalk__weatherResultValue0Struct> {
    let result = super.tryCall(
      "weather",
      "weather():((uint256,uint256,uint96,uint32,uint32,uint32,bool,bool))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__weatherResultValue0Struct>(value[0].toTuple())
    );
  }

  withdrawSeasons(): i32 {
    let result = super.call("withdrawSeasons", "withdrawSeasons():(uint8)", []);

    return result[0].toI32();
  }

  try_withdrawSeasons(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "withdrawSeasons",
      "withdrawSeasons():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  yield(): BigInt {
    let result = super.call("yield", "yield():(uint32)", []);

    return result[0].toBigInt();
  }

  try_yield(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("yield", "yield():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfEth(account: Address): BigInt {
    let result = super.call("balanceOfEth", "balanceOfEth(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOfEth(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfEth",
      "balanceOfEth(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfFarmableBeans(account: Address): BigInt {
    let result = super.call(
      "balanceOfFarmableBeans",
      "balanceOfFarmableBeans(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfFarmableBeans(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfFarmableBeans",
      "balanceOfFarmableBeans(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfFarmableBeansV1(account: Address): BigInt {
    let result = super.call(
      "balanceOfFarmableBeansV1",
      "balanceOfFarmableBeansV1(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfFarmableBeansV1(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfFarmableBeansV1",
      "balanceOfFarmableBeansV1(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfFarmableBeansV2(roots: BigInt): BigInt {
    let result = super.call(
      "balanceOfFarmableBeansV2",
      "balanceOfFarmableBeansV2(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(roots)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfFarmableBeansV2(roots: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfFarmableBeansV2",
      "balanceOfFarmableBeansV2(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(roots)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfFarmableBeansV3(account: Address, accountStalk: BigInt): BigInt {
    let result = super.call(
      "balanceOfFarmableBeansV3",
      "balanceOfFarmableBeansV3(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(accountStalk)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOfFarmableBeansV3(
    account: Address,
    accountStalk: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfFarmableBeansV3",
      "balanceOfFarmableBeansV3(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(accountStalk)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfFarmableSeeds(account: Address): BigInt {
    let result = super.call(
      "balanceOfFarmableSeeds",
      "balanceOfFarmableSeeds(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfFarmableSeeds(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfFarmableSeeds",
      "balanceOfFarmableSeeds(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfFarmableStalk(account: Address): BigInt {
    let result = super.call(
      "balanceOfFarmableStalk",
      "balanceOfFarmableStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfFarmableStalk(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfFarmableStalk",
      "balanceOfFarmableStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfGrownStalk(account: Address): BigInt {
    let result = super.call(
      "balanceOfGrownStalk",
      "balanceOfGrownStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfGrownStalk(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfGrownStalk",
      "balanceOfGrownStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfPlentyBase(account: Address): BigInt {
    let result = super.call(
      "balanceOfPlentyBase",
      "balanceOfPlentyBase(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfPlentyBase(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfPlentyBase",
      "balanceOfPlentyBase(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfRainRoots(account: Address): BigInt {
    let result = super.call(
      "balanceOfRainRoots",
      "balanceOfRainRoots(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfRainRoots(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfRainRoots",
      "balanceOfRainRoots(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfRoots(account: Address): BigInt {
    let result = super.call(
      "balanceOfRoots",
      "balanceOfRoots(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfRoots(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfRoots",
      "balanceOfRoots(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfSeeds(account: Address): BigInt {
    let result = super.call(
      "balanceOfSeeds",
      "balanceOfSeeds(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfSeeds(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfSeeds",
      "balanceOfSeeds(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfStalk(account: Address): BigInt {
    let result = super.call(
      "balanceOfStalk",
      "balanceOfStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfStalk(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfStalk",
      "balanceOfStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfUnclaimedRoots(account: Address): BigInt {
    let result = super.call(
      "balanceOfUnclaimedRoots",
      "balanceOfUnclaimedRoots(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfUnclaimedRoots(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfUnclaimedRoots",
      "balanceOfUnclaimedRoots(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  beanDeposit(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "beanDeposit",
      "beanDeposit(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_beanDeposit(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "beanDeposit",
      "beanDeposit(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  beanWithdrawal(account: Address, i: BigInt): BigInt {
    let result = super.call(
      "beanWithdrawal",
      "beanWithdrawal(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );

    return result[0].toBigInt();
  }

  try_beanWithdrawal(account: Address, i: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "beanWithdrawal",
      "beanWithdrawal(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastSeasonOfPlenty(): BigInt {
    let result = super.call(
      "lastSeasonOfPlenty",
      "lastSeasonOfPlenty():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastSeasonOfPlenty(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastSeasonOfPlenty",
      "lastSeasonOfPlenty():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastSupplyIncreases(account: Address): BigInt {
    let result = super.call(
      "lastSupplyIncreases",
      "lastSupplyIncreases(address):(uint32)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_lastSupplyIncreases(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastSupplyIncreases",
      "lastSupplyIncreases(address):(uint32)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastUpdate(account: Address): BigInt {
    let result = super.call("lastUpdate", "lastUpdate(address):(uint32)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_lastUpdate(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastUpdate", "lastUpdate(address):(uint32)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  legacySupplyIncrease(): Beanstalk__legacySupplyIncreaseResultValue0Struct {
    let result = super.call(
      "legacySupplyIncrease",
      "legacySupplyIncrease():((uint256,uint256,uint256))",
      []
    );

    return changetype<Beanstalk__legacySupplyIncreaseResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_legacySupplyIncrease(): ethereum.CallResult<
    Beanstalk__legacySupplyIncreaseResultValue0Struct
  > {
    let result = super.tryCall(
      "legacySupplyIncrease",
      "legacySupplyIncrease():((uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__legacySupplyIncreaseResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  lpDeposit(account: Address, id: BigInt): Beanstalk__lpDepositResult {
    let result = super.call(
      "lpDeposit",
      "lpDeposit(address,uint32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return new Beanstalk__lpDepositResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_lpDeposit(
    account: Address,
    id: BigInt
  ): ethereum.CallResult<Beanstalk__lpDepositResult> {
    let result = super.tryCall(
      "lpDeposit",
      "lpDeposit(address,uint32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Beanstalk__lpDepositResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  lpWithdrawal(account: Address, i: BigInt): BigInt {
    let result = super.call(
      "lpWithdrawal",
      "lpWithdrawal(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );

    return result[0].toBigInt();
  }

  try_lpWithdrawal(account: Address, i: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lpWithdrawal",
      "lpWithdrawal(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposedUntil(account: Address): BigInt {
    let result = super.call(
      "proposedUntil",
      "proposedUntil(address):(uint32)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_proposedUntil(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposedUntil",
      "proposedUntil(address):(uint32)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seasonsOfPlenty(): Beanstalk__seasonsOfPlentyResultValue0Struct {
    let result = super.call(
      "seasonsOfPlenty",
      "seasonsOfPlenty():((uint256,uint256,uint32))",
      []
    );

    return changetype<Beanstalk__seasonsOfPlentyResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_seasonsOfPlenty(): ethereum.CallResult<
    Beanstalk__seasonsOfPlentyResultValue0Struct
  > {
    let result = super.tryCall(
      "seasonsOfPlenty",
      "seasonsOfPlenty():((uint256,uint256,uint32))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__seasonsOfPlentyResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  supplyIncreases(): BigInt {
    let result = super.call(
      "supplyIncreases",
      "supplyIncreases():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_supplyIncreases(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "supplyIncreases",
      "supplyIncreases():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDepositedBeans(): BigInt {
    let result = super.call(
      "totalDepositedBeans",
      "totalDepositedBeans():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalDepositedBeans(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDepositedBeans",
      "totalDepositedBeans():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDepositedLP(): BigInt {
    let result = super.call(
      "totalDepositedLP",
      "totalDepositedLP():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalDepositedLP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDepositedLP",
      "totalDepositedLP():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFarmableBeans(): BigInt {
    let result = super.call(
      "totalFarmableBeans",
      "totalFarmableBeans():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalFarmableBeans(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFarmableBeans",
      "totalFarmableBeans():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRoots(): BigInt {
    let result = super.call("totalRoots", "totalRoots():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalRoots(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalRoots", "totalRoots():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSeeds(): BigInt {
    let result = super.call("totalSeeds", "totalSeeds():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSeeds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSeeds", "totalSeeds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStalk(): BigInt {
    let result = super.call("totalStalk", "totalStalk():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStalk(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStalk", "totalStalk():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWithdrawnBeans(): BigInt {
    let result = super.call(
      "totalWithdrawnBeans",
      "totalWithdrawnBeans():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalWithdrawnBeans(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalWithdrawnBeans",
      "totalWithdrawnBeans():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWithdrawnLP(): BigInt {
    let result = super.call(
      "totalWithdrawnLP",
      "totalWithdrawnLP():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalWithdrawnLP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalWithdrawnLP",
      "totalWithdrawnLP():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unclaimedRoots(): BigInt {
    let result = super.call("unclaimedRoots", "unclaimedRoots():(uint256)", []);

    return result[0].toBigInt();
  }

  try_unclaimedRoots(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unclaimedRoots",
      "unclaimedRoots():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  voted1(account: Address): boolean {
    let result = super.call("voted", "voted(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_voted1(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("voted", "voted(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  votedUntil(account: Address): BigInt {
    let result = super.call("votedUntil", "votedUntil(address):(uint32)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_votedUntil(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votedUntil", "votedUntil(address):(uint32)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weth(): Address {
    let result = super.call("weth", "weth():(address)", []);

    return result[0].toAddress();
  }

  try_weth(): ethereum.CallResult<Address> {
    let result = super.tryCall("weth", "weth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDeposit(
    account: Address,
    token: Address,
    season: BigInt
  ): Beanstalk__getDepositResult {
    let result = super.call(
      "getDeposit",
      "getDeposit(address,address,uint32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(season)
      ]
    );

    return new Beanstalk__getDepositResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getDeposit(
    account: Address,
    token: Address,
    season: BigInt
  ): ethereum.CallResult<Beanstalk__getDepositResult> {
    let result = super.tryCall(
      "getDeposit",
      "getDeposit(address,address,uint32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(season)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Beanstalk__getDepositResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getTotalDeposited(token: Address): BigInt {
    let result = super.call(
      "getTotalDeposited",
      "getTotalDeposited(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getTotalDeposited(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalDeposited",
      "getTotalDeposited(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalWithdrawn(token: Address): BigInt {
    let result = super.call(
      "getTotalWithdrawn",
      "getTotalWithdrawn(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getTotalWithdrawn(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalWithdrawn",
      "getTotalWithdrawn(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWithdrawal(account: Address, token: Address, season: BigInt): BigInt {
    let result = super.call(
      "getWithdrawal",
      "getWithdrawal(address,address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(season)
      ]
    );

    return result[0].toBigInt();
  }

  try_getWithdrawal(
    account: Address,
    token: Address,
    season: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWithdrawal",
      "getWithdrawal(address,address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(season)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenSettings(token: Address): Beanstalk__tokenSettingsResultValue0Struct {
    let result = super.call(
      "tokenSettings",
      "tokenSettings(address):((bytes4,uint32,uint32))",
      [ethereum.Value.fromAddress(token)]
    );

    return changetype<Beanstalk__tokenSettingsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_tokenSettings(
    token: Address
  ): ethereum.CallResult<Beanstalk__tokenSettingsResultValue0Struct> {
    let result = super.tryCall(
      "tokenSettings",
      "tokenSettings(address):((bytes4,uint32,uint32))",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__tokenSettingsResultValue0Struct>(value[0].toTuple())
    );
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get c(): ClaimCallCStruct {
    return changetype<ClaimCallCStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get beansClaimed(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimCallCStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimAndUnwrapBeansCall extends ethereum.Call {
  get inputs(): ClaimAndUnwrapBeansCall__Inputs {
    return new ClaimAndUnwrapBeansCall__Inputs(this);
  }

  get outputs(): ClaimAndUnwrapBeansCall__Outputs {
    return new ClaimAndUnwrapBeansCall__Outputs(this);
  }
}

export class ClaimAndUnwrapBeansCall__Inputs {
  _call: ClaimAndUnwrapBeansCall;

  constructor(call: ClaimAndUnwrapBeansCall) {
    this._call = call;
  }

  get c(): ClaimAndUnwrapBeansCallCStruct {
    return changetype<ClaimAndUnwrapBeansCallCStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimAndUnwrapBeansCall__Outputs {
  _call: ClaimAndUnwrapBeansCall;

  constructor(call: ClaimAndUnwrapBeansCall) {
    this._call = call;
  }

  get beansClaimed(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimAndUnwrapBeansCallCStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimBeansCall extends ethereum.Call {
  get inputs(): ClaimBeansCall__Inputs {
    return new ClaimBeansCall__Inputs(this);
  }

  get outputs(): ClaimBeansCall__Outputs {
    return new ClaimBeansCall__Outputs(this);
  }
}

export class ClaimBeansCall__Inputs {
  _call: ClaimBeansCall;

  constructor(call: ClaimBeansCall) {
    this._call = call;
  }

  get withdrawals(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class ClaimBeansCall__Outputs {
  _call: ClaimBeansCall;

  constructor(call: ClaimBeansCall) {
    this._call = call;
  }
}

export class ClaimEthCall extends ethereum.Call {
  get inputs(): ClaimEthCall__Inputs {
    return new ClaimEthCall__Inputs(this);
  }

  get outputs(): ClaimEthCall__Outputs {
    return new ClaimEthCall__Outputs(this);
  }
}

export class ClaimEthCall__Inputs {
  _call: ClaimEthCall;

  constructor(call: ClaimEthCall) {
    this._call = call;
  }
}

export class ClaimEthCall__Outputs {
  _call: ClaimEthCall;

  constructor(call: ClaimEthCall) {
    this._call = call;
  }
}

export class ClaimLPCall extends ethereum.Call {
  get inputs(): ClaimLPCall__Inputs {
    return new ClaimLPCall__Inputs(this);
  }

  get outputs(): ClaimLPCall__Outputs {
    return new ClaimLPCall__Outputs(this);
  }
}

export class ClaimLPCall__Inputs {
  _call: ClaimLPCall;

  constructor(call: ClaimLPCall) {
    this._call = call;
  }

  get withdrawals(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class ClaimLPCall__Outputs {
  _call: ClaimLPCall;

  constructor(call: ClaimLPCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }

  get plots(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class RemoveAndClaimLPCall extends ethereum.Call {
  get inputs(): RemoveAndClaimLPCall__Inputs {
    return new RemoveAndClaimLPCall__Inputs(this);
  }

  get outputs(): RemoveAndClaimLPCall__Outputs {
    return new RemoveAndClaimLPCall__Outputs(this);
  }
}

export class RemoveAndClaimLPCall__Inputs {
  _call: RemoveAndClaimLPCall;

  constructor(call: RemoveAndClaimLPCall) {
    this._call = call;
  }

  get withdrawals(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get minBeanAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minEthAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RemoveAndClaimLPCall__Outputs {
  _call: RemoveAndClaimLPCall;

  constructor(call: RemoveAndClaimLPCall) {
    this._call = call;
  }
}

export class UnwrapBeansCall extends ethereum.Call {
  get inputs(): UnwrapBeansCall__Inputs {
    return new UnwrapBeansCall__Inputs(this);
  }

  get outputs(): UnwrapBeansCall__Outputs {
    return new UnwrapBeansCall__Outputs(this);
  }
}

export class UnwrapBeansCall__Inputs {
  _call: UnwrapBeansCall;

  constructor(call: UnwrapBeansCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnwrapBeansCall__Outputs {
  _call: UnwrapBeansCall;

  constructor(call: UnwrapBeansCall) {
    this._call = call;
  }

  get beansToWallet(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WrapBeansCall extends ethereum.Call {
  get inputs(): WrapBeansCall__Inputs {
    return new WrapBeansCall__Inputs(this);
  }

  get outputs(): WrapBeansCall__Outputs {
    return new WrapBeansCall__Outputs(this);
  }
}

export class WrapBeansCall__Inputs {
  _call: WrapBeansCall;

  constructor(call: WrapBeansCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WrapBeansCall__Outputs {
  _call: WrapBeansCall;

  constructor(call: WrapBeansCall) {
    this._call = call;
  }
}

export class ClaimConvertAddAndDepositLPCall extends ethereum.Call {
  get inputs(): ClaimConvertAddAndDepositLPCall__Inputs {
    return new ClaimConvertAddAndDepositLPCall__Inputs(this);
  }

  get outputs(): ClaimConvertAddAndDepositLPCall__Outputs {
    return new ClaimConvertAddAndDepositLPCall__Outputs(this);
  }
}

export class ClaimConvertAddAndDepositLPCall__Inputs {
  _call: ClaimConvertAddAndDepositLPCall;

  constructor(call: ClaimConvertAddAndDepositLPCall) {
    this._call = call;
  }

  get lp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get al(): ClaimConvertAddAndDepositLPCallAlStruct {
    return changetype<ClaimConvertAddAndDepositLPCallAlStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get crates(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get claim(): ClaimConvertAddAndDepositLPCallClaimStruct {
    return changetype<ClaimConvertAddAndDepositLPCallClaimStruct>(
      this._call.inputValues[4].value.toTuple()
    );
  }
}

export class ClaimConvertAddAndDepositLPCall__Outputs {
  _call: ClaimConvertAddAndDepositLPCall;

  constructor(call: ClaimConvertAddAndDepositLPCall) {
    this._call = call;
  }
}

export class ClaimConvertAddAndDepositLPCallAlStruct extends ethereum.Tuple {
  get beanAmount(): BigInt {
    return this[0].toBigInt();
  }

  get minBeanAmount(): BigInt {
    return this[1].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[2].toBigInt();
  }
}

export class ClaimConvertAddAndDepositLPCallClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ConvertAddAndDepositLPCall extends ethereum.Call {
  get inputs(): ConvertAddAndDepositLPCall__Inputs {
    return new ConvertAddAndDepositLPCall__Inputs(this);
  }

  get outputs(): ConvertAddAndDepositLPCall__Outputs {
    return new ConvertAddAndDepositLPCall__Outputs(this);
  }
}

export class ConvertAddAndDepositLPCall__Inputs {
  _call: ConvertAddAndDepositLPCall;

  constructor(call: ConvertAddAndDepositLPCall) {
    this._call = call;
  }

  get lp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get al(): ConvertAddAndDepositLPCallAlStruct {
    return changetype<ConvertAddAndDepositLPCallAlStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get crates(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class ConvertAddAndDepositLPCall__Outputs {
  _call: ConvertAddAndDepositLPCall;

  constructor(call: ConvertAddAndDepositLPCall) {
    this._call = call;
  }
}

export class ConvertAddAndDepositLPCallAlStruct extends ethereum.Tuple {
  get beanAmount(): BigInt {
    return this[0].toBigInt();
  }

  get minBeanAmount(): BigInt {
    return this[1].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[2].toBigInt();
  }
}

export class ConvertDepositedBeansCall extends ethereum.Call {
  get inputs(): ConvertDepositedBeansCall__Inputs {
    return new ConvertDepositedBeansCall__Inputs(this);
  }

  get outputs(): ConvertDepositedBeansCall__Outputs {
    return new ConvertDepositedBeansCall__Outputs(this);
  }
}

export class ConvertDepositedBeansCall__Inputs {
  _call: ConvertDepositedBeansCall;

  constructor(call: ConvertDepositedBeansCall) {
    this._call = call;
  }

  get beans(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minLP(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get crates(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class ConvertDepositedBeansCall__Outputs {
  _call: ConvertDepositedBeansCall;

  constructor(call: ConvertDepositedBeansCall) {
    this._call = call;
  }
}

export class ConvertDepositedLPCall extends ethereum.Call {
  get inputs(): ConvertDepositedLPCall__Inputs {
    return new ConvertDepositedLPCall__Inputs(this);
  }

  get outputs(): ConvertDepositedLPCall__Outputs {
    return new ConvertDepositedLPCall__Outputs(this);
  }
}

export class ConvertDepositedLPCall__Inputs {
  _call: ConvertDepositedLPCall;

  constructor(call: ConvertDepositedLPCall) {
    this._call = call;
  }

  get lp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minBeans(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get crates(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class ConvertDepositedLPCall__Outputs {
  _call: ConvertDepositedLPCall;

  constructor(call: ConvertDepositedLPCall) {
    this._call = call;
  }
}

export class DiamondCutCall extends ethereum.Call {
  get inputs(): DiamondCutCall__Inputs {
    return new DiamondCutCall__Inputs(this);
  }

  get outputs(): DiamondCutCall__Outputs {
    return new DiamondCutCall__Outputs(this);
  }
}

export class DiamondCutCall__Inputs {
  _call: DiamondCutCall;

  constructor(call: DiamondCutCall) {
    this._call = call;
  }

  get _diamondCut(): Array<DiamondCutCall_diamondCutStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      DiamondCutCall_diamondCutStruct
    >();
  }

  get _init(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _calldata(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class DiamondCutCall__Outputs {
  _call: DiamondCutCall;

  constructor(call: DiamondCutCall) {
    this._call = call;
  }
}

export class DiamondCutCall_diamondCutStruct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get action(): i32 {
    return this[1].toI32();
  }

  get functionSelectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class BuyAndSowBeansCall extends ethereum.Call {
  get inputs(): BuyAndSowBeansCall__Inputs {
    return new BuyAndSowBeansCall__Inputs(this);
  }

  get outputs(): BuyAndSowBeansCall__Outputs {
    return new BuyAndSowBeansCall__Outputs(this);
  }
}

export class BuyAndSowBeansCall__Inputs {
  _call: BuyAndSowBeansCall;

  constructor(call: BuyAndSowBeansCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyAndSowBeansCall__Outputs {
  _call: BuyAndSowBeansCall;

  constructor(call: BuyAndSowBeansCall) {
    this._call = call;
  }

  get pods(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BuyAndSowBeansWithMinCall extends ethereum.Call {
  get inputs(): BuyAndSowBeansWithMinCall__Inputs {
    return new BuyAndSowBeansWithMinCall__Inputs(this);
  }

  get outputs(): BuyAndSowBeansWithMinCall__Outputs {
    return new BuyAndSowBeansWithMinCall__Outputs(this);
  }
}

export class BuyAndSowBeansWithMinCall__Inputs {
  _call: BuyAndSowBeansWithMinCall;

  constructor(call: BuyAndSowBeansWithMinCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyAndSowBeansWithMinCall__Outputs {
  _call: BuyAndSowBeansWithMinCall;

  constructor(call: BuyAndSowBeansWithMinCall) {
    this._call = call;
  }

  get pods(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimAndSowBeansCall extends ethereum.Call {
  get inputs(): ClaimAndSowBeansCall__Inputs {
    return new ClaimAndSowBeansCall__Inputs(this);
  }

  get outputs(): ClaimAndSowBeansCall__Outputs {
    return new ClaimAndSowBeansCall__Outputs(this);
  }
}

export class ClaimAndSowBeansCall__Inputs {
  _call: ClaimAndSowBeansCall;

  constructor(call: ClaimAndSowBeansCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get claim(): ClaimAndSowBeansCallClaimStruct {
    return changetype<ClaimAndSowBeansCallClaimStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class ClaimAndSowBeansCall__Outputs {
  _call: ClaimAndSowBeansCall;

  constructor(call: ClaimAndSowBeansCall) {
    this._call = call;
  }

  get pods(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimAndSowBeansCallClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimAndSowBeansWithMinCall extends ethereum.Call {
  get inputs(): ClaimAndSowBeansWithMinCall__Inputs {
    return new ClaimAndSowBeansWithMinCall__Inputs(this);
  }

  get outputs(): ClaimAndSowBeansWithMinCall__Outputs {
    return new ClaimAndSowBeansWithMinCall__Outputs(this);
  }
}

export class ClaimAndSowBeansWithMinCall__Inputs {
  _call: ClaimAndSowBeansWithMinCall;

  constructor(call: ClaimAndSowBeansWithMinCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get claim(): ClaimAndSowBeansWithMinCallClaimStruct {
    return changetype<ClaimAndSowBeansWithMinCallClaimStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class ClaimAndSowBeansWithMinCall__Outputs {
  _call: ClaimAndSowBeansWithMinCall;

  constructor(call: ClaimAndSowBeansWithMinCall) {
    this._call = call;
  }

  get pods(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimAndSowBeansWithMinCallClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimBuyAndSowBeansCall extends ethereum.Call {
  get inputs(): ClaimBuyAndSowBeansCall__Inputs {
    return new ClaimBuyAndSowBeansCall__Inputs(this);
  }

  get outputs(): ClaimBuyAndSowBeansCall__Outputs {
    return new ClaimBuyAndSowBeansCall__Outputs(this);
  }
}

export class ClaimBuyAndSowBeansCall__Inputs {
  _call: ClaimBuyAndSowBeansCall;

  constructor(call: ClaimBuyAndSowBeansCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get claim(): ClaimBuyAndSowBeansCallClaimStruct {
    return changetype<ClaimBuyAndSowBeansCallClaimStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class ClaimBuyAndSowBeansCall__Outputs {
  _call: ClaimBuyAndSowBeansCall;

  constructor(call: ClaimBuyAndSowBeansCall) {
    this._call = call;
  }

  get pods(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimBuyAndSowBeansCallClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimBuyAndSowBeansWithMinCall extends ethereum.Call {
  get inputs(): ClaimBuyAndSowBeansWithMinCall__Inputs {
    return new ClaimBuyAndSowBeansWithMinCall__Inputs(this);
  }

  get outputs(): ClaimBuyAndSowBeansWithMinCall__Outputs {
    return new ClaimBuyAndSowBeansWithMinCall__Outputs(this);
  }
}

export class ClaimBuyAndSowBeansWithMinCall__Inputs {
  _call: ClaimBuyAndSowBeansWithMinCall;

  constructor(call: ClaimBuyAndSowBeansWithMinCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get claim(): ClaimBuyAndSowBeansWithMinCallClaimStruct {
    return changetype<ClaimBuyAndSowBeansWithMinCallClaimStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class ClaimBuyAndSowBeansWithMinCall__Outputs {
  _call: ClaimBuyAndSowBeansWithMinCall;

  constructor(call: ClaimBuyAndSowBeansWithMinCall) {
    this._call = call;
  }

  get pods(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimBuyAndSowBeansWithMinCallClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class SowBeansCall extends ethereum.Call {
  get inputs(): SowBeansCall__Inputs {
    return new SowBeansCall__Inputs(this);
  }

  get outputs(): SowBeansCall__Outputs {
    return new SowBeansCall__Outputs(this);
  }
}

export class SowBeansCall__Inputs {
  _call: SowBeansCall;

  constructor(call: SowBeansCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SowBeansCall__Outputs {
  _call: SowBeansCall;

  constructor(call: SowBeansCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SowBeansWithMinCall extends ethereum.Call {
  get inputs(): SowBeansWithMinCall__Inputs {
    return new SowBeansWithMinCall__Inputs(this);
  }

  get outputs(): SowBeansWithMinCall__Outputs {
    return new SowBeansWithMinCall__Outputs(this);
  }
}

export class SowBeansWithMinCall__Inputs {
  _call: SowBeansWithMinCall;

  constructor(call: SowBeansWithMinCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SowBeansWithMinCall__Outputs {
  _call: SowBeansWithMinCall;

  constructor(call: SowBeansWithMinCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateFundraiserCall extends ethereum.Call {
  get inputs(): CreateFundraiserCall__Inputs {
    return new CreateFundraiserCall__Inputs(this);
  }

  get outputs(): CreateFundraiserCall__Outputs {
    return new CreateFundraiserCall__Outputs(this);
  }
}

export class CreateFundraiserCall__Inputs {
  _call: CreateFundraiserCall;

  constructor(call: CreateFundraiserCall) {
    this._call = call;
  }

  get payee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateFundraiserCall__Outputs {
  _call: CreateFundraiserCall;

  constructor(call: CreateFundraiserCall) {
    this._call = call;
  }
}

export class FundCall extends ethereum.Call {
  get inputs(): FundCall__Inputs {
    return new FundCall__Inputs(this);
  }

  get outputs(): FundCall__Outputs {
    return new FundCall__Outputs(this);
  }
}

export class FundCall__Inputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FundCall__Outputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CommitCall extends ethereum.Call {
  get inputs(): CommitCall__Inputs {
    return new CommitCall__Inputs(this);
  }

  get outputs(): CommitCall__Outputs {
    return new CommitCall__Outputs(this);
  }
}

export class CommitCall__Inputs {
  _call: CommitCall;

  constructor(call: CommitCall) {
    this._call = call;
  }

  get bip(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CommitCall__Outputs {
  _call: CommitCall;

  constructor(call: CommitCall) {
    this._call = call;
  }
}

export class EmergencyCommitCall extends ethereum.Call {
  get inputs(): EmergencyCommitCall__Inputs {
    return new EmergencyCommitCall__Inputs(this);
  }

  get outputs(): EmergencyCommitCall__Outputs {
    return new EmergencyCommitCall__Outputs(this);
  }
}

export class EmergencyCommitCall__Inputs {
  _call: EmergencyCommitCall;

  constructor(call: EmergencyCommitCall) {
    this._call = call;
  }

  get bip(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EmergencyCommitCall__Outputs {
  _call: EmergencyCommitCall;

  constructor(call: EmergencyCommitCall) {
    this._call = call;
  }
}

export class OwnerPauseCall extends ethereum.Call {
  get inputs(): OwnerPauseCall__Inputs {
    return new OwnerPauseCall__Inputs(this);
  }

  get outputs(): OwnerPauseCall__Outputs {
    return new OwnerPauseCall__Outputs(this);
  }
}

export class OwnerPauseCall__Inputs {
  _call: OwnerPauseCall;

  constructor(call: OwnerPauseCall) {
    this._call = call;
  }
}

export class OwnerPauseCall__Outputs {
  _call: OwnerPauseCall;

  constructor(call: OwnerPauseCall) {
    this._call = call;
  }
}

export class OwnerUnpauseCall extends ethereum.Call {
  get inputs(): OwnerUnpauseCall__Inputs {
    return new OwnerUnpauseCall__Inputs(this);
  }

  get outputs(): OwnerUnpauseCall__Outputs {
    return new OwnerUnpauseCall__Outputs(this);
  }
}

export class OwnerUnpauseCall__Inputs {
  _call: OwnerUnpauseCall;

  constructor(call: OwnerUnpauseCall) {
    this._call = call;
  }
}

export class OwnerUnpauseCall__Outputs {
  _call: OwnerUnpauseCall;

  constructor(call: OwnerUnpauseCall) {
    this._call = call;
  }
}

export class PauseOrUnpauseCall extends ethereum.Call {
  get inputs(): PauseOrUnpauseCall__Inputs {
    return new PauseOrUnpauseCall__Inputs(this);
  }

  get outputs(): PauseOrUnpauseCall__Outputs {
    return new PauseOrUnpauseCall__Outputs(this);
  }
}

export class PauseOrUnpauseCall__Inputs {
  _call: PauseOrUnpauseCall;

  constructor(call: PauseOrUnpauseCall) {
    this._call = call;
  }

  get bip(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PauseOrUnpauseCall__Outputs {
  _call: PauseOrUnpauseCall;

  constructor(call: PauseOrUnpauseCall) {
    this._call = call;
  }
}

export class ProposeCall extends ethereum.Call {
  get inputs(): ProposeCall__Inputs {
    return new ProposeCall__Inputs(this);
  }

  get outputs(): ProposeCall__Outputs {
    return new ProposeCall__Outputs(this);
  }
}

export class ProposeCall__Inputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }

  get _diamondCut(): Array<ProposeCall_diamondCutStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      ProposeCall_diamondCutStruct
    >();
  }

  get _init(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _calldata(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _pauseOrUnpause(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class ProposeCall__Outputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }
}

export class ProposeCall_diamondCutStruct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get action(): i32 {
    return this[1].toI32();
  }

  get functionSelectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class UnvoteCall extends ethereum.Call {
  get inputs(): UnvoteCall__Inputs {
    return new UnvoteCall__Inputs(this);
  }

  get outputs(): UnvoteCall__Outputs {
    return new UnvoteCall__Outputs(this);
  }
}

export class UnvoteCall__Inputs {
  _call: UnvoteCall;

  constructor(call: UnvoteCall) {
    this._call = call;
  }

  get bip(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnvoteCall__Outputs {
  _call: UnvoteCall;

  constructor(call: UnvoteCall) {
    this._call = call;
  }
}

export class UnvoteAllCall extends ethereum.Call {
  get inputs(): UnvoteAllCall__Inputs {
    return new UnvoteAllCall__Inputs(this);
  }

  get outputs(): UnvoteAllCall__Outputs {
    return new UnvoteAllCall__Outputs(this);
  }
}

export class UnvoteAllCall__Inputs {
  _call: UnvoteAllCall;

  constructor(call: UnvoteAllCall) {
    this._call = call;
  }

  get bip_list(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class UnvoteAllCall__Outputs {
  _call: UnvoteAllCall;

  constructor(call: UnvoteAllCall) {
    this._call = call;
  }
}

export class VoteCall extends ethereum.Call {
  get inputs(): VoteCall__Inputs {
    return new VoteCall__Inputs(this);
  }

  get outputs(): VoteCall__Outputs {
    return new VoteCall__Outputs(this);
  }
}

export class VoteCall__Inputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get bip(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class VoteCall__Outputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }
}

export class VoteAllCall extends ethereum.Call {
  get inputs(): VoteAllCall__Inputs {
    return new VoteAllCall__Inputs(this);
  }

  get outputs(): VoteAllCall__Outputs {
    return new VoteAllCall__Outputs(this);
  }
}

export class VoteAllCall__Inputs {
  _call: VoteAllCall;

  constructor(call: VoteAllCall) {
    this._call = call;
  }

  get bip_list(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class VoteAllCall__Outputs {
  _call: VoteAllCall;

  constructor(call: VoteAllCall) {
    this._call = call;
  }
}

export class VoteUnvoteAllCall extends ethereum.Call {
  get inputs(): VoteUnvoteAllCall__Inputs {
    return new VoteUnvoteAllCall__Inputs(this);
  }

  get outputs(): VoteUnvoteAllCall__Outputs {
    return new VoteUnvoteAllCall__Outputs(this);
  }
}

export class VoteUnvoteAllCall__Inputs {
  _call: VoteUnvoteAllCall;

  constructor(call: VoteUnvoteAllCall) {
    this._call = call;
  }

  get bip_list(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class VoteUnvoteAllCall__Outputs {
  _call: VoteUnvoteAllCall;

  constructor(call: VoteUnvoteAllCall) {
    this._call = call;
  }
}

export class ApprovePodsCall extends ethereum.Call {
  get inputs(): ApprovePodsCall__Inputs {
    return new ApprovePodsCall__Inputs(this);
  }

  get outputs(): ApprovePodsCall__Outputs {
    return new ApprovePodsCall__Outputs(this);
  }
}

export class ApprovePodsCall__Inputs {
  _call: ApprovePodsCall;

  constructor(call: ApprovePodsCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApprovePodsCall__Outputs {
  _call: ApprovePodsCall;

  constructor(call: ApprovePodsCall) {
    this._call = call;
  }
}

export class BuyBeansAndCreatePodOrderCall extends ethereum.Call {
  get inputs(): BuyBeansAndCreatePodOrderCall__Inputs {
    return new BuyBeansAndCreatePodOrderCall__Inputs(this);
  }

  get outputs(): BuyBeansAndCreatePodOrderCall__Outputs {
    return new BuyBeansAndCreatePodOrderCall__Outputs(this);
  }
}

export class BuyBeansAndCreatePodOrderCall__Inputs {
  _call: BuyBeansAndCreatePodOrderCall;

  constructor(call: BuyBeansAndCreatePodOrderCall) {
    this._call = call;
  }

  get beanAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyBeanAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get pricePerPod(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get maxPlaceInLine(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BuyBeansAndCreatePodOrderCall__Outputs {
  _call: BuyBeansAndCreatePodOrderCall;

  constructor(call: BuyBeansAndCreatePodOrderCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class BuyBeansAndFillPodListingCall extends ethereum.Call {
  get inputs(): BuyBeansAndFillPodListingCall__Inputs {
    return new BuyBeansAndFillPodListingCall__Inputs(this);
  }

  get outputs(): BuyBeansAndFillPodListingCall__Outputs {
    return new BuyBeansAndFillPodListingCall__Outputs(this);
  }
}

export class BuyBeansAndFillPodListingCall__Inputs {
  _call: BuyBeansAndFillPodListingCall;

  constructor(call: BuyBeansAndFillPodListingCall) {
    this._call = call;
  }

  get l(): BuyBeansAndFillPodListingCallLStruct {
    return changetype<BuyBeansAndFillPodListingCallLStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get beanAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get buyBeanAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyBeansAndFillPodListingCall__Outputs {
  _call: BuyBeansAndFillPodListingCall;

  constructor(call: BuyBeansAndFillPodListingCall) {
    this._call = call;
  }
}

export class BuyBeansAndFillPodListingCallLStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get index(): BigInt {
    return this[1].toBigInt();
  }

  get start(): BigInt {
    return this[2].toBigInt();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get pricePerPod(): i32 {
    return this[4].toI32();
  }

  get maxHarvestableIndex(): BigInt {
    return this[5].toBigInt();
  }

  get toWallet(): boolean {
    return this[6].toBoolean();
  }
}

export class CancelPodListingCall extends ethereum.Call {
  get inputs(): CancelPodListingCall__Inputs {
    return new CancelPodListingCall__Inputs(this);
  }

  get outputs(): CancelPodListingCall__Outputs {
    return new CancelPodListingCall__Outputs(this);
  }
}

export class CancelPodListingCall__Inputs {
  _call: CancelPodListingCall;

  constructor(call: CancelPodListingCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelPodListingCall__Outputs {
  _call: CancelPodListingCall;

  constructor(call: CancelPodListingCall) {
    this._call = call;
  }
}

export class CancelPodOrderCall extends ethereum.Call {
  get inputs(): CancelPodOrderCall__Inputs {
    return new CancelPodOrderCall__Inputs(this);
  }

  get outputs(): CancelPodOrderCall__Outputs {
    return new CancelPodOrderCall__Outputs(this);
  }
}

export class CancelPodOrderCall__Inputs {
  _call: CancelPodOrderCall;

  constructor(call: CancelPodOrderCall) {
    this._call = call;
  }

  get pricePerPod(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get maxPlaceInLine(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get toWallet(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class CancelPodOrderCall__Outputs {
  _call: CancelPodOrderCall;

  constructor(call: CancelPodOrderCall) {
    this._call = call;
  }
}

export class ClaimAndCreatePodOrderCall extends ethereum.Call {
  get inputs(): ClaimAndCreatePodOrderCall__Inputs {
    return new ClaimAndCreatePodOrderCall__Inputs(this);
  }

  get outputs(): ClaimAndCreatePodOrderCall__Outputs {
    return new ClaimAndCreatePodOrderCall__Outputs(this);
  }
}

export class ClaimAndCreatePodOrderCall__Inputs {
  _call: ClaimAndCreatePodOrderCall;

  constructor(call: ClaimAndCreatePodOrderCall) {
    this._call = call;
  }

  get beanAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get pricePerPod(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get maxPlaceInLine(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get claim(): ClaimAndCreatePodOrderCallClaimStruct {
    return changetype<ClaimAndCreatePodOrderCallClaimStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class ClaimAndCreatePodOrderCall__Outputs {
  _call: ClaimAndCreatePodOrderCall;

  constructor(call: ClaimAndCreatePodOrderCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ClaimAndCreatePodOrderCallClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimAndFillPodListingCall extends ethereum.Call {
  get inputs(): ClaimAndFillPodListingCall__Inputs {
    return new ClaimAndFillPodListingCall__Inputs(this);
  }

  get outputs(): ClaimAndFillPodListingCall__Outputs {
    return new ClaimAndFillPodListingCall__Outputs(this);
  }
}

export class ClaimAndFillPodListingCall__Inputs {
  _call: ClaimAndFillPodListingCall;

  constructor(call: ClaimAndFillPodListingCall) {
    this._call = call;
  }

  get l(): ClaimAndFillPodListingCallLStruct {
    return changetype<ClaimAndFillPodListingCallLStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get beanAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get claim(): ClaimAndFillPodListingCallClaimStruct {
    return changetype<ClaimAndFillPodListingCallClaimStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class ClaimAndFillPodListingCall__Outputs {
  _call: ClaimAndFillPodListingCall;

  constructor(call: ClaimAndFillPodListingCall) {
    this._call = call;
  }
}

export class ClaimAndFillPodListingCallLStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get index(): BigInt {
    return this[1].toBigInt();
  }

  get start(): BigInt {
    return this[2].toBigInt();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get pricePerPod(): i32 {
    return this[4].toI32();
  }

  get maxHarvestableIndex(): BigInt {
    return this[5].toBigInt();
  }

  get toWallet(): boolean {
    return this[6].toBoolean();
  }
}

export class ClaimAndFillPodListingCallClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimBuyBeansAndCreatePodOrderCall extends ethereum.Call {
  get inputs(): ClaimBuyBeansAndCreatePodOrderCall__Inputs {
    return new ClaimBuyBeansAndCreatePodOrderCall__Inputs(this);
  }

  get outputs(): ClaimBuyBeansAndCreatePodOrderCall__Outputs {
    return new ClaimBuyBeansAndCreatePodOrderCall__Outputs(this);
  }
}

export class ClaimBuyBeansAndCreatePodOrderCall__Inputs {
  _call: ClaimBuyBeansAndCreatePodOrderCall;

  constructor(call: ClaimBuyBeansAndCreatePodOrderCall) {
    this._call = call;
  }

  get beanAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyBeanAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get pricePerPod(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get maxPlaceInLine(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get claim(): ClaimBuyBeansAndCreatePodOrderCallClaimStruct {
    return changetype<ClaimBuyBeansAndCreatePodOrderCallClaimStruct>(
      this._call.inputValues[4].value.toTuple()
    );
  }
}

export class ClaimBuyBeansAndCreatePodOrderCall__Outputs {
  _call: ClaimBuyBeansAndCreatePodOrderCall;

  constructor(call: ClaimBuyBeansAndCreatePodOrderCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ClaimBuyBeansAndCreatePodOrderCallClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimBuyBeansAndFillPodListingCall extends ethereum.Call {
  get inputs(): ClaimBuyBeansAndFillPodListingCall__Inputs {
    return new ClaimBuyBeansAndFillPodListingCall__Inputs(this);
  }

  get outputs(): ClaimBuyBeansAndFillPodListingCall__Outputs {
    return new ClaimBuyBeansAndFillPodListingCall__Outputs(this);
  }
}

export class ClaimBuyBeansAndFillPodListingCall__Inputs {
  _call: ClaimBuyBeansAndFillPodListingCall;

  constructor(call: ClaimBuyBeansAndFillPodListingCall) {
    this._call = call;
  }

  get l(): ClaimBuyBeansAndFillPodListingCallLStruct {
    return changetype<ClaimBuyBeansAndFillPodListingCallLStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get beanAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get buyBeanAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get claim(): ClaimBuyBeansAndFillPodListingCallClaimStruct {
    return changetype<ClaimBuyBeansAndFillPodListingCallClaimStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class ClaimBuyBeansAndFillPodListingCall__Outputs {
  _call: ClaimBuyBeansAndFillPodListingCall;

  constructor(call: ClaimBuyBeansAndFillPodListingCall) {
    this._call = call;
  }
}

export class ClaimBuyBeansAndFillPodListingCallLStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get index(): BigInt {
    return this[1].toBigInt();
  }

  get start(): BigInt {
    return this[2].toBigInt();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get pricePerPod(): i32 {
    return this[4].toI32();
  }

  get maxHarvestableIndex(): BigInt {
    return this[5].toBigInt();
  }

  get toWallet(): boolean {
    return this[6].toBoolean();
  }
}

export class ClaimBuyBeansAndFillPodListingCallClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class CreatePodListingCall extends ethereum.Call {
  get inputs(): CreatePodListingCall__Inputs {
    return new CreatePodListingCall__Inputs(this);
  }

  get outputs(): CreatePodListingCall__Outputs {
    return new CreatePodListingCall__Outputs(this);
  }
}

export class CreatePodListingCall__Inputs {
  _call: CreatePodListingCall;

  constructor(call: CreatePodListingCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get start(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get pricePerPod(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get maxHarvestableIndex(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get toWallet(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class CreatePodListingCall__Outputs {
  _call: CreatePodListingCall;

  constructor(call: CreatePodListingCall) {
    this._call = call;
  }
}

export class CreatePodOrderCall extends ethereum.Call {
  get inputs(): CreatePodOrderCall__Inputs {
    return new CreatePodOrderCall__Inputs(this);
  }

  get outputs(): CreatePodOrderCall__Outputs {
    return new CreatePodOrderCall__Outputs(this);
  }
}

export class CreatePodOrderCall__Inputs {
  _call: CreatePodOrderCall;

  constructor(call: CreatePodOrderCall) {
    this._call = call;
  }

  get beanAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get pricePerPod(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get maxPlaceInLine(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreatePodOrderCall__Outputs {
  _call: CreatePodOrderCall;

  constructor(call: CreatePodOrderCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class FillPodListingCall extends ethereum.Call {
  get inputs(): FillPodListingCall__Inputs {
    return new FillPodListingCall__Inputs(this);
  }

  get outputs(): FillPodListingCall__Outputs {
    return new FillPodListingCall__Outputs(this);
  }
}

export class FillPodListingCall__Inputs {
  _call: FillPodListingCall;

  constructor(call: FillPodListingCall) {
    this._call = call;
  }

  get l(): FillPodListingCallLStruct {
    return changetype<FillPodListingCallLStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get beanAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FillPodListingCall__Outputs {
  _call: FillPodListingCall;

  constructor(call: FillPodListingCall) {
    this._call = call;
  }
}

export class FillPodListingCallLStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get index(): BigInt {
    return this[1].toBigInt();
  }

  get start(): BigInt {
    return this[2].toBigInt();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get pricePerPod(): i32 {
    return this[4].toI32();
  }

  get maxHarvestableIndex(): BigInt {
    return this[5].toBigInt();
  }

  get toWallet(): boolean {
    return this[6].toBoolean();
  }
}

export class FillPodOrderCall extends ethereum.Call {
  get inputs(): FillPodOrderCall__Inputs {
    return new FillPodOrderCall__Inputs(this);
  }

  get outputs(): FillPodOrderCall__Outputs {
    return new FillPodOrderCall__Outputs(this);
  }
}

export class FillPodOrderCall__Inputs {
  _call: FillPodOrderCall;

  constructor(call: FillPodOrderCall) {
    this._call = call;
  }

  get o(): FillPodOrderCallOStruct {
    return changetype<FillPodOrderCallOStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get start(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get toWallet(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class FillPodOrderCall__Outputs {
  _call: FillPodOrderCall;

  constructor(call: FillPodOrderCall) {
    this._call = call;
  }
}

export class FillPodOrderCallOStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get pricePerPod(): i32 {
    return this[1].toI32();
  }

  get maxPlaceInLine(): BigInt {
    return this[2].toBigInt();
  }
}

export class TransferPlotCall extends ethereum.Call {
  get inputs(): TransferPlotCall__Inputs {
    return new TransferPlotCall__Inputs(this);
  }

  get outputs(): TransferPlotCall__Outputs {
    return new TransferPlotCall__Outputs(this);
  }
}

export class TransferPlotCall__Inputs {
  _call: TransferPlotCall;

  constructor(call: TransferPlotCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get start(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get end(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class TransferPlotCall__Outputs {
  _call: TransferPlotCall;

  constructor(call: TransferPlotCall) {
    this._call = call;
  }
}

export class CaptureCall extends ethereum.Call {
  get inputs(): CaptureCall__Inputs {
    return new CaptureCall__Inputs(this);
  }

  get outputs(): CaptureCall__Outputs {
    return new CaptureCall__Outputs(this);
  }
}

export class CaptureCall__Inputs {
  _call: CaptureCall;

  constructor(call: CaptureCall) {
    this._call = call;
  }
}

export class CaptureCall__Outputs {
  _call: CaptureCall;

  constructor(call: CaptureCall) {
    this._call = call;
  }

  get value0(): CaptureCallValue0Struct {
    return changetype<CaptureCallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }

  get value1(): CaptureCallValue1Struct {
    return changetype<CaptureCallValue1Struct>(
      this._call.outputValues[1].value.toTuple()
    );
  }
}

export class CaptureCallValue0Struct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class CaptureCallValue1Struct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class SunriseCall extends ethereum.Call {
  get inputs(): SunriseCall__Inputs {
    return new SunriseCall__Inputs(this);
  }

  get outputs(): SunriseCall__Outputs {
    return new SunriseCall__Outputs(this);
  }
}

export class SunriseCall__Inputs {
  _call: SunriseCall;

  constructor(call: SunriseCall) {
    this._call = call;
  }
}

export class SunriseCall__Outputs {
  _call: SunriseCall;

  constructor(call: SunriseCall) {
    this._call = call;
  }
}

export class AddAndDepositLPCall extends ethereum.Call {
  get inputs(): AddAndDepositLPCall__Inputs {
    return new AddAndDepositLPCall__Inputs(this);
  }

  get outputs(): AddAndDepositLPCall__Outputs {
    return new AddAndDepositLPCall__Outputs(this);
  }
}

export class AddAndDepositLPCall__Inputs {
  _call: AddAndDepositLPCall;

  constructor(call: AddAndDepositLPCall) {
    this._call = call;
  }

  get lp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyBeanAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get buyEthAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get al(): AddAndDepositLPCallAlStruct {
    return changetype<AddAndDepositLPCallAlStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class AddAndDepositLPCall__Outputs {
  _call: AddAndDepositLPCall;

  constructor(call: AddAndDepositLPCall) {
    this._call = call;
  }
}

export class AddAndDepositLPCallAlStruct extends ethereum.Tuple {
  get beanAmount(): BigInt {
    return this[0].toBigInt();
  }

  get minBeanAmount(): BigInt {
    return this[1].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[2].toBigInt();
  }
}

export class BuyAndDepositBeansCall extends ethereum.Call {
  get inputs(): BuyAndDepositBeansCall__Inputs {
    return new BuyAndDepositBeansCall__Inputs(this);
  }

  get outputs(): BuyAndDepositBeansCall__Outputs {
    return new BuyAndDepositBeansCall__Outputs(this);
  }
}

export class BuyAndDepositBeansCall__Inputs {
  _call: BuyAndDepositBeansCall;

  constructor(call: BuyAndDepositBeansCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyAndDepositBeansCall__Outputs {
  _call: BuyAndDepositBeansCall;

  constructor(call: BuyAndDepositBeansCall) {
    this._call = call;
  }
}

export class ClaimAddAndDepositLPCall extends ethereum.Call {
  get inputs(): ClaimAddAndDepositLPCall__Inputs {
    return new ClaimAddAndDepositLPCall__Inputs(this);
  }

  get outputs(): ClaimAddAndDepositLPCall__Outputs {
    return new ClaimAddAndDepositLPCall__Outputs(this);
  }
}

export class ClaimAddAndDepositLPCall__Inputs {
  _call: ClaimAddAndDepositLPCall;

  constructor(call: ClaimAddAndDepositLPCall) {
    this._call = call;
  }

  get lp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyBeanAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get buyEthAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get al(): ClaimAddAndDepositLPCallAlStruct {
    return changetype<ClaimAddAndDepositLPCallAlStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }

  get claim(): ClaimAddAndDepositLPCallClaimStruct {
    return changetype<ClaimAddAndDepositLPCallClaimStruct>(
      this._call.inputValues[4].value.toTuple()
    );
  }
}

export class ClaimAddAndDepositLPCall__Outputs {
  _call: ClaimAddAndDepositLPCall;

  constructor(call: ClaimAddAndDepositLPCall) {
    this._call = call;
  }
}

export class ClaimAddAndDepositLPCallAlStruct extends ethereum.Tuple {
  get beanAmount(): BigInt {
    return this[0].toBigInt();
  }

  get minBeanAmount(): BigInt {
    return this[1].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[2].toBigInt();
  }
}

export class ClaimAddAndDepositLPCallClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimAndDepositBeansCall extends ethereum.Call {
  get inputs(): ClaimAndDepositBeansCall__Inputs {
    return new ClaimAndDepositBeansCall__Inputs(this);
  }

  get outputs(): ClaimAndDepositBeansCall__Outputs {
    return new ClaimAndDepositBeansCall__Outputs(this);
  }
}

export class ClaimAndDepositBeansCall__Inputs {
  _call: ClaimAndDepositBeansCall;

  constructor(call: ClaimAndDepositBeansCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get claim(): ClaimAndDepositBeansCallClaimStruct {
    return changetype<ClaimAndDepositBeansCallClaimStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class ClaimAndDepositBeansCall__Outputs {
  _call: ClaimAndDepositBeansCall;

  constructor(call: ClaimAndDepositBeansCall) {
    this._call = call;
  }
}

export class ClaimAndDepositBeansCallClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimAndDepositLPCall extends ethereum.Call {
  get inputs(): ClaimAndDepositLPCall__Inputs {
    return new ClaimAndDepositLPCall__Inputs(this);
  }

  get outputs(): ClaimAndDepositLPCall__Outputs {
    return new ClaimAndDepositLPCall__Outputs(this);
  }
}

export class ClaimAndDepositLPCall__Inputs {
  _call: ClaimAndDepositLPCall;

  constructor(call: ClaimAndDepositLPCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get claim(): ClaimAndDepositLPCallClaimStruct {
    return changetype<ClaimAndDepositLPCallClaimStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class ClaimAndDepositLPCall__Outputs {
  _call: ClaimAndDepositLPCall;

  constructor(call: ClaimAndDepositLPCall) {
    this._call = call;
  }
}

export class ClaimAndDepositLPCallClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimAndWithdrawBeansCall extends ethereum.Call {
  get inputs(): ClaimAndWithdrawBeansCall__Inputs {
    return new ClaimAndWithdrawBeansCall__Inputs(this);
  }

  get outputs(): ClaimAndWithdrawBeansCall__Outputs {
    return new ClaimAndWithdrawBeansCall__Outputs(this);
  }
}

export class ClaimAndWithdrawBeansCall__Inputs {
  _call: ClaimAndWithdrawBeansCall;

  constructor(call: ClaimAndWithdrawBeansCall) {
    this._call = call;
  }

  get crates(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get claim(): ClaimAndWithdrawBeansCallClaimStruct {
    return changetype<ClaimAndWithdrawBeansCallClaimStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class ClaimAndWithdrawBeansCall__Outputs {
  _call: ClaimAndWithdrawBeansCall;

  constructor(call: ClaimAndWithdrawBeansCall) {
    this._call = call;
  }
}

export class ClaimAndWithdrawBeansCallClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimAndWithdrawLPCall extends ethereum.Call {
  get inputs(): ClaimAndWithdrawLPCall__Inputs {
    return new ClaimAndWithdrawLPCall__Inputs(this);
  }

  get outputs(): ClaimAndWithdrawLPCall__Outputs {
    return new ClaimAndWithdrawLPCall__Outputs(this);
  }
}

export class ClaimAndWithdrawLPCall__Inputs {
  _call: ClaimAndWithdrawLPCall;

  constructor(call: ClaimAndWithdrawLPCall) {
    this._call = call;
  }

  get crates(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get claim(): ClaimAndWithdrawLPCallClaimStruct {
    return changetype<ClaimAndWithdrawLPCallClaimStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class ClaimAndWithdrawLPCall__Outputs {
  _call: ClaimAndWithdrawLPCall;

  constructor(call: ClaimAndWithdrawLPCall) {
    this._call = call;
  }
}

export class ClaimAndWithdrawLPCallClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimBuyAndDepositBeansCall extends ethereum.Call {
  get inputs(): ClaimBuyAndDepositBeansCall__Inputs {
    return new ClaimBuyAndDepositBeansCall__Inputs(this);
  }

  get outputs(): ClaimBuyAndDepositBeansCall__Outputs {
    return new ClaimBuyAndDepositBeansCall__Outputs(this);
  }
}

export class ClaimBuyAndDepositBeansCall__Inputs {
  _call: ClaimBuyAndDepositBeansCall;

  constructor(call: ClaimBuyAndDepositBeansCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get claim(): ClaimBuyAndDepositBeansCallClaimStruct {
    return changetype<ClaimBuyAndDepositBeansCallClaimStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class ClaimBuyAndDepositBeansCall__Outputs {
  _call: ClaimBuyAndDepositBeansCall;

  constructor(call: ClaimBuyAndDepositBeansCall) {
    this._call = call;
  }
}

export class ClaimBuyAndDepositBeansCallClaimStruct extends ethereum.Tuple {
  get beanWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimEth(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minBeanAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minEthAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class DepositBeansCall extends ethereum.Call {
  get inputs(): DepositBeansCall__Inputs {
    return new DepositBeansCall__Inputs(this);
  }

  get outputs(): DepositBeansCall__Outputs {
    return new DepositBeansCall__Outputs(this);
  }
}

export class DepositBeansCall__Inputs {
  _call: DepositBeansCall;

  constructor(call: DepositBeansCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositBeansCall__Outputs {
  _call: DepositBeansCall;

  constructor(call: DepositBeansCall) {
    this._call = call;
  }
}

export class DepositLPCall extends ethereum.Call {
  get inputs(): DepositLPCall__Inputs {
    return new DepositLPCall__Inputs(this);
  }

  get outputs(): DepositLPCall__Outputs {
    return new DepositLPCall__Outputs(this);
  }
}

export class DepositLPCall__Inputs {
  _call: DepositLPCall;

  constructor(call: DepositLPCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositLPCall__Outputs {
  _call: DepositLPCall;

  constructor(call: DepositLPCall) {
    this._call = call;
  }
}

export class UpdateSiloCall extends ethereum.Call {
  get inputs(): UpdateSiloCall__Inputs {
    return new UpdateSiloCall__Inputs(this);
  }

  get outputs(): UpdateSiloCall__Outputs {
    return new UpdateSiloCall__Outputs(this);
  }
}

export class UpdateSiloCall__Inputs {
  _call: UpdateSiloCall;

  constructor(call: UpdateSiloCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateSiloCall__Outputs {
  _call: UpdateSiloCall;

  constructor(call: UpdateSiloCall) {
    this._call = call;
  }
}

export class WithdrawBeansCall extends ethereum.Call {
  get inputs(): WithdrawBeansCall__Inputs {
    return new WithdrawBeansCall__Inputs(this);
  }

  get outputs(): WithdrawBeansCall__Outputs {
    return new WithdrawBeansCall__Outputs(this);
  }
}

export class WithdrawBeansCall__Inputs {
  _call: WithdrawBeansCall;

  constructor(call: WithdrawBeansCall) {
    this._call = call;
  }

  get crates(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class WithdrawBeansCall__Outputs {
  _call: WithdrawBeansCall;

  constructor(call: WithdrawBeansCall) {
    this._call = call;
  }
}

export class WithdrawLPCall extends ethereum.Call {
  get inputs(): WithdrawLPCall__Inputs {
    return new WithdrawLPCall__Inputs(this);
  }

  get outputs(): WithdrawLPCall__Outputs {
    return new WithdrawLPCall__Outputs(this);
  }
}

export class WithdrawLPCall__Inputs {
  _call: WithdrawLPCall;

  constructor(call: WithdrawLPCall) {
    this._call = call;
  }

  get crates(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class WithdrawLPCall__Outputs {
  _call: WithdrawLPCall;

  constructor(call: WithdrawLPCall) {
    this._call = call;
  }
}

export class ClaimTokenBySeasonCall extends ethereum.Call {
  get inputs(): ClaimTokenBySeasonCall__Inputs {
    return new ClaimTokenBySeasonCall__Inputs(this);
  }

  get outputs(): ClaimTokenBySeasonCall__Outputs {
    return new ClaimTokenBySeasonCall__Outputs(this);
  }
}

export class ClaimTokenBySeasonCall__Inputs {
  _call: ClaimTokenBySeasonCall;

  constructor(call: ClaimTokenBySeasonCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get season(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimTokenBySeasonCall__Outputs {
  _call: ClaimTokenBySeasonCall;

  constructor(call: ClaimTokenBySeasonCall) {
    this._call = call;
  }
}

export class ClaimTokenBySeasonsCall extends ethereum.Call {
  get inputs(): ClaimTokenBySeasonsCall__Inputs {
    return new ClaimTokenBySeasonsCall__Inputs(this);
  }

  get outputs(): ClaimTokenBySeasonsCall__Outputs {
    return new ClaimTokenBySeasonsCall__Outputs(this);
  }
}

export class ClaimTokenBySeasonsCall__Inputs {
  _call: ClaimTokenBySeasonsCall;

  constructor(call: ClaimTokenBySeasonsCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get seasons(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ClaimTokenBySeasonsCall__Outputs {
  _call: ClaimTokenBySeasonsCall;

  constructor(call: ClaimTokenBySeasonsCall) {
    this._call = call;
  }
}

export class ClaimTokensBySeasonCall extends ethereum.Call {
  get inputs(): ClaimTokensBySeasonCall__Inputs {
    return new ClaimTokensBySeasonCall__Inputs(this);
  }

  get outputs(): ClaimTokensBySeasonCall__Outputs {
    return new ClaimTokensBySeasonCall__Outputs(this);
  }
}

export class ClaimTokensBySeasonCall__Inputs {
  _call: ClaimTokensBySeasonCall;

  constructor(call: ClaimTokensBySeasonCall) {
    this._call = call;
  }

  get claims(): Array<ClaimTokensBySeasonCallClaimsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      ClaimTokensBySeasonCallClaimsStruct
    >();
  }
}

export class ClaimTokensBySeasonCall__Outputs {
  _call: ClaimTokensBySeasonCall;

  constructor(call: ClaimTokensBySeasonCall) {
    this._call = call;
  }
}

export class ClaimTokensBySeasonCallClaimsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get season(): BigInt {
    return this[1].toBigInt();
  }
}

export class ClaimTokensBySeasonsCall extends ethereum.Call {
  get inputs(): ClaimTokensBySeasonsCall__Inputs {
    return new ClaimTokensBySeasonsCall__Inputs(this);
  }

  get outputs(): ClaimTokensBySeasonsCall__Outputs {
    return new ClaimTokensBySeasonsCall__Outputs(this);
  }
}

export class ClaimTokensBySeasonsCall__Inputs {
  _call: ClaimTokensBySeasonsCall;

  constructor(call: ClaimTokensBySeasonsCall) {
    this._call = call;
  }

  get claims(): Array<ClaimTokensBySeasonsCallClaimsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      ClaimTokensBySeasonsCallClaimsStruct
    >();
  }
}

export class ClaimTokensBySeasonsCall__Outputs {
  _call: ClaimTokensBySeasonsCall;

  constructor(call: ClaimTokensBySeasonsCall) {
    this._call = call;
  }
}

export class ClaimTokensBySeasonsCallClaimsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get seasons(): Array<BigInt> {
    return this[1].toBigIntArray();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class WhitelistTokenCall extends ethereum.Call {
  get inputs(): WhitelistTokenCall__Inputs {
    return new WhitelistTokenCall__Inputs(this);
  }

  get outputs(): WhitelistTokenCall__Outputs {
    return new WhitelistTokenCall__Outputs(this);
  }
}

export class WhitelistTokenCall__Inputs {
  _call: WhitelistTokenCall;

  constructor(call: WhitelistTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get selector(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get stalk(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get seeds(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class WhitelistTokenCall__Outputs {
  _call: WhitelistTokenCall;

  constructor(call: WhitelistTokenCall) {
    this._call = call;
  }
}

export class WithdrawTokenBySeasonCall extends ethereum.Call {
  get inputs(): WithdrawTokenBySeasonCall__Inputs {
    return new WithdrawTokenBySeasonCall__Inputs(this);
  }

  get outputs(): WithdrawTokenBySeasonCall__Outputs {
    return new WithdrawTokenBySeasonCall__Outputs(this);
  }
}

export class WithdrawTokenBySeasonCall__Inputs {
  _call: WithdrawTokenBySeasonCall;

  constructor(call: WithdrawTokenBySeasonCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get season(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawTokenBySeasonCall__Outputs {
  _call: WithdrawTokenBySeasonCall;

  constructor(call: WithdrawTokenBySeasonCall) {
    this._call = call;
  }
}

export class WithdrawTokenBySeasonsCall extends ethereum.Call {
  get inputs(): WithdrawTokenBySeasonsCall__Inputs {
    return new WithdrawTokenBySeasonsCall__Inputs(this);
  }

  get outputs(): WithdrawTokenBySeasonsCall__Outputs {
    return new WithdrawTokenBySeasonsCall__Outputs(this);
  }
}

export class WithdrawTokenBySeasonsCall__Inputs {
  _call: WithdrawTokenBySeasonsCall;

  constructor(call: WithdrawTokenBySeasonsCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get seasons(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class WithdrawTokenBySeasonsCall__Outputs {
  _call: WithdrawTokenBySeasonsCall;

  constructor(call: WithdrawTokenBySeasonsCall) {
    this._call = call;
  }
}

export class WithdrawTokensBySeasonCall extends ethereum.Call {
  get inputs(): WithdrawTokensBySeasonCall__Inputs {
    return new WithdrawTokensBySeasonCall__Inputs(this);
  }

  get outputs(): WithdrawTokensBySeasonCall__Outputs {
    return new WithdrawTokensBySeasonCall__Outputs(this);
  }
}

export class WithdrawTokensBySeasonCall__Inputs {
  _call: WithdrawTokensBySeasonCall;

  constructor(call: WithdrawTokensBySeasonCall) {
    this._call = call;
  }

  get withdraws(): Array<WithdrawTokensBySeasonCallWithdrawsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      WithdrawTokensBySeasonCallWithdrawsStruct
    >();
  }
}

export class WithdrawTokensBySeasonCall__Outputs {
  _call: WithdrawTokensBySeasonCall;

  constructor(call: WithdrawTokensBySeasonCall) {
    this._call = call;
  }
}

export class WithdrawTokensBySeasonCallWithdrawsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get season(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }
}

export class WithdrawTokensBySeasonsCall extends ethereum.Call {
  get inputs(): WithdrawTokensBySeasonsCall__Inputs {
    return new WithdrawTokensBySeasonsCall__Inputs(this);
  }

  get outputs(): WithdrawTokensBySeasonsCall__Outputs {
    return new WithdrawTokensBySeasonsCall__Outputs(this);
  }
}

export class WithdrawTokensBySeasonsCall__Inputs {
  _call: WithdrawTokensBySeasonsCall;

  constructor(call: WithdrawTokensBySeasonsCall) {
    this._call = call;
  }

  get withdraws(): Array<WithdrawTokensBySeasonsCallWithdrawsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      WithdrawTokensBySeasonsCallWithdrawsStruct
    >();
  }
}

export class WithdrawTokensBySeasonsCall__Outputs {
  _call: WithdrawTokensBySeasonsCall;

  constructor(call: WithdrawTokensBySeasonsCall) {
    this._call = call;
  }
}

export class WithdrawTokensBySeasonsCallWithdrawsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get seasons(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this[2].toBigIntArray();
  }
}
