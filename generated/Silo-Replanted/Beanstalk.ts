// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Convert extends ethereum.Event {
  get params(): Convert__Params {
    return new Convert__Params(this);
  }
}

export class Convert__Params {
  _event: Convert;

  constructor(event: Convert) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get fromAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get toAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RemoveDeposits extends ethereum.Event {
  get params(): RemoveDeposits__Params {
    return new RemoveDeposits__Params(this);
  }
}

export class RemoveDeposits__Params {
  _event: RemoveDeposits;

  constructor(event: RemoveDeposits) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get seasons(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class DiamondCut extends ethereum.Event {
  get params(): DiamondCut__Params {
    return new DiamondCut__Params(this);
  }
}

export class DiamondCut__Params {
  _event: DiamondCut;

  constructor(event: DiamondCut) {
    this._event = event;
  }

  get _diamondCut(): Array<DiamondCut_diamondCutStruct> {
    return this._event.parameters[0].value.toTupleArray<
      DiamondCut_diamondCutStruct
    >();
  }

  get _init(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _calldata(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class DiamondCut_diamondCutStruct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get action(): i32 {
    return this[1].toI32();
  }

  get functionSelectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class SetFertilizer extends ethereum.Event {
  get params(): SetFertilizer__Params {
    return new SetFertilizer__Params(this);
  }
}

export class SetFertilizer__Params {
  _event: SetFertilizer;

  constructor(event: SetFertilizer) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bpf(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Harvest extends ethereum.Event {
  get params(): Harvest__Params {
    return new Harvest__Params(this);
  }
}

export class Harvest__Params {
  _event: Harvest;

  constructor(event: Harvest) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get plots(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get beans(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PodListingCancelled extends ethereum.Event {
  get params(): PodListingCancelled__Params {
    return new PodListingCancelled__Params(this);
  }
}

export class PodListingCancelled__Params {
  _event: PodListingCancelled;

  constructor(event: PodListingCancelled) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Sow extends ethereum.Event {
  get params(): Sow__Params {
    return new Sow__Params(this);
  }
}

export class Sow__Params {
  _event: Sow;

  constructor(event: Sow) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get beans(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get pods(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CompleteFundraiser extends ethereum.Event {
  get params(): CompleteFundraiser__Params {
    return new CompleteFundraiser__Params(this);
  }
}

export class CompleteFundraiser__Params {
  _event: CompleteFundraiser;

  constructor(event: CompleteFundraiser) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class CreateFundraiser extends ethereum.Event {
  get params(): CreateFundraiser__Params {
    return new CreateFundraiser__Params(this);
  }
}

export class CreateFundraiser__Params {
  _event: CreateFundraiser;

  constructor(event: CreateFundraiser) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get fundraiser(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FundFundraiser extends ethereum.Event {
  get params(): FundFundraiser__Params {
    return new FundFundraiser__Params(this);
  }
}

export class FundFundraiser__Params {
  _event: FundFundraiser;

  constructor(event: FundFundraiser) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PlotTransfer extends ethereum.Event {
  get params(): PlotTransfer__Params {
    return new PlotTransfer__Params(this);
  }
}

export class PlotTransfer__Params {
  _event: PlotTransfer;

  constructor(event: PlotTransfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get pods(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PodApproval extends ethereum.Event {
  get params(): PodApproval__Params {
    return new PodApproval__Params(this);
  }
}

export class PodApproval__Params {
  _event: PodApproval;

  constructor(event: PodApproval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pods(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PodListingCancelled1 extends ethereum.Event {
  get params(): PodListingCancelled1__Params {
    return new PodListingCancelled1__Params(this);
  }
}

export class PodListingCancelled1__Params {
  _event: PodListingCancelled1;

  constructor(event: PodListingCancelled1) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PodListingCreated extends ethereum.Event {
  get params(): PodListingCreated__Params {
    return new PodListingCreated__Params(this);
  }
}

export class PodListingCreated__Params {
  _event: PodListingCreated;

  constructor(event: PodListingCreated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get start(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get pricePerPod(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get maxHarvestableIndex(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get mode(): i32 {
    return this._event.parameters[6].value.toI32();
  }
}

export class PodListingFilled extends ethereum.Event {
  get params(): PodListingFilled__Params {
    return new PodListingFilled__Params(this);
  }
}

export class PodListingFilled__Params {
  _event: PodListingFilled;

  constructor(event: PodListingFilled) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get start(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PodOrderCancelled extends ethereum.Event {
  get params(): PodOrderCancelled__Params {
    return new PodOrderCancelled__Params(this);
  }
}

export class PodOrderCancelled__Params {
  _event: PodOrderCancelled;

  constructor(event: PodOrderCancelled) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class PodOrderCreated extends ethereum.Event {
  get params(): PodOrderCreated__Params {
    return new PodOrderCreated__Params(this);
  }
}

export class PodOrderCreated__Params {
  _event: PodOrderCreated;

  constructor(event: PodOrderCreated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get pricePerPod(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get maxPlaceInLine(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PodOrderFilled extends ethereum.Event {
  get params(): PodOrderFilled__Params {
    return new PodOrderFilled__Params(this);
  }
}

export class PodOrderFilled__Params {
  _event: PodOrderFilled;

  constructor(event: PodOrderFilled) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get index(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get start(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Pause extends ethereum.Event {
  get params(): Pause__Params {
    return new Pause__Params(this);
  }
}

export class Pause__Params {
  _event: Pause;

  constructor(event: Pause) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Unpause extends ethereum.Event {
  get params(): Unpause__Params {
    return new Unpause__Params(this);
  }
}

export class Unpause__Params {
  _event: Unpause;

  constructor(event: Unpause) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get timePassed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Incentivization extends ethereum.Event {
  get params(): Incentivization__Params {
    return new Incentivization__Params(this);
  }
}

export class Incentivization__Params {
  _event: Incentivization;

  constructor(event: Incentivization) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get beans(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Reward extends ethereum.Event {
  get params(): Reward__Params {
    return new Reward__Params(this);
  }
}

export class Reward__Params {
  _event: Reward;

  constructor(event: Reward) {
    this._event = event;
  }

  get toField(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get toSilo(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get toFertilizer(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SeasonOfPlenty extends ethereum.Event {
  get params(): SeasonOfPlenty__Params {
    return new SeasonOfPlenty__Params(this);
  }
}

export class SeasonOfPlenty__Params {
  _event: SeasonOfPlenty;

  constructor(event: SeasonOfPlenty) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get toField(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Soil extends ethereum.Event {
  get params(): Soil__Params {
    return new Soil__Params(this);
  }
}

export class Soil__Params {
  _event: Soil;

  constructor(event: Soil) {
    this._event = event;
  }

  get soil(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Sunrise extends ethereum.Event {
  get params(): Sunrise__Params {
    return new Sunrise__Params(this);
  }
}

export class Sunrise__Params {
  _event: Sunrise;

  constructor(event: Sunrise) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class WeatherChange extends ethereum.Event {
  get params(): WeatherChange__Params {
    return new WeatherChange__Params(this);
  }
}

export class WeatherChange__Params {
  _event: WeatherChange;

  constructor(event: WeatherChange) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get caseId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get change(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class AddDeposit extends ethereum.Event {
  get params(): AddDeposit__Params {
    return new AddDeposit__Params(this);
  }
}

export class AddDeposit__Params {
  _event: AddDeposit;

  constructor(event: AddDeposit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get bdv(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class AddWithdrawal extends ethereum.Event {
  get params(): AddWithdrawal__Params {
    return new AddWithdrawal__Params(this);
  }
}

export class AddWithdrawal__Params {
  _event: AddWithdrawal;

  constructor(event: AddWithdrawal) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ClaimPlenty extends ethereum.Event {
  get params(): ClaimPlenty__Params {
    return new ClaimPlenty__Params(this);
  }
}

export class ClaimPlenty__Params {
  _event: ClaimPlenty;

  constructor(event: ClaimPlenty) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get plenty(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Earn extends ethereum.Event {
  get params(): Earn__Params {
    return new Earn__Params(this);
  }
}

export class Earn__Params {
  _event: Earn;

  constructor(event: Earn) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get beans(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RemoveDeposit extends ethereum.Event {
  get params(): RemoveDeposit__Params {
    return new RemoveDeposit__Params(this);
  }
}

export class RemoveDeposit__Params {
  _event: RemoveDeposit;

  constructor(event: RemoveDeposit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RemoveDeposits1 extends ethereum.Event {
  get params(): RemoveDeposits1__Params {
    return new RemoveDeposits1__Params(this);
  }
}

export class RemoveDeposits1__Params {
  _event: RemoveDeposits1;

  constructor(event: RemoveDeposits1) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get seasons(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RemoveWithdrawal extends ethereum.Event {
  get params(): RemoveWithdrawal__Params {
    return new RemoveWithdrawal__Params(this);
  }
}

export class RemoveWithdrawal__Params {
  _event: RemoveWithdrawal;

  constructor(event: RemoveWithdrawal) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RemoveWithdrawals extends ethereum.Event {
  get params(): RemoveWithdrawals__Params {
    return new RemoveWithdrawals__Params(this);
  }
}

export class RemoveWithdrawals__Params {
  _event: RemoveWithdrawals;

  constructor(event: RemoveWithdrawals) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get seasons(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SeedsBalanceChanged extends ethereum.Event {
  get params(): SeedsBalanceChanged__Params {
    return new SeedsBalanceChanged__Params(this);
  }
}

export class SeedsBalanceChanged__Params {
  _event: SeedsBalanceChanged;

  constructor(event: SeedsBalanceChanged) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delta(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StalkBalanceChanged extends ethereum.Event {
  get params(): StalkBalanceChanged__Params {
    return new StalkBalanceChanged__Params(this);
  }
}

export class StalkBalanceChanged__Params {
  _event: StalkBalanceChanged;

  constructor(event: StalkBalanceChanged) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delta(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get deltaRoots(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InternalBalanceChanged extends ethereum.Event {
  get params(): InternalBalanceChanged__Params {
    return new InternalBalanceChanged__Params(this);
  }
}

export class InternalBalanceChanged__Params {
  _event: InternalBalanceChanged;

  constructor(event: InternalBalanceChanged) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get delta(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AddUnripeToken extends ethereum.Event {
  get params(): AddUnripeToken__Params {
    return new AddUnripeToken__Params(this);
  }
}

export class AddUnripeToken__Params {
  _event: AddUnripeToken;

  constructor(event: AddUnripeToken) {
    this._event = event;
  }

  get unripeToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get underlyingToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get merkleRoot(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class ChangeUnderlying extends ethereum.Event {
  get params(): ChangeUnderlying__Params {
    return new ChangeUnderlying__Params(this);
  }
}

export class ChangeUnderlying__Params {
  _event: ChangeUnderlying;

  constructor(event: ChangeUnderlying) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get underlying(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ClaimUnripe extends ethereum.Event {
  get params(): ClaimUnripe__Params {
    return new ClaimUnripe__Params(this);
  }
}

export class ClaimUnripe__Params {
  _event: ClaimUnripe;

  constructor(event: ClaimUnripe) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Ripen extends ethereum.Event {
  get params(): Ripen__Params {
    return new Ripen__Params(this);
  }
}

export class Ripen__Params {
  _event: Ripen;

  constructor(event: Ripen) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get underlying(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DewhitelistToken extends ethereum.Event {
  get params(): DewhitelistToken__Params {
    return new DewhitelistToken__Params(this);
  }
}

export class DewhitelistToken__Params {
  _event: DewhitelistToken;

  constructor(event: DewhitelistToken) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WhitelistToken extends ethereum.Event {
  get params(): WhitelistToken__Params {
    return new WhitelistToken__Params(this);
  }
}

export class WhitelistToken__Params {
  _event: WhitelistToken;

  constructor(event: WhitelistToken) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get selector(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get seeds(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get stalk(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Beanstalk__facetsResultFacets_Struct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get functionSelectors(): Array<Bytes> {
    return this[1].toBytesArray();
  }
}

export class Beanstalk__balanceOfBatchFertilizerResultValue0Struct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get lastBpf(): BigInt {
    return this[1].toBigInt();
  }
}

export class Beanstalk__balanceOfFertilizerResultValue0Struct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get lastBpf(): BigInt {
    return this[1].toBigInt();
  }
}

export class Beanstalk__fundraiserResultValue0Struct extends ethereum.Tuple {
  get payee(): Address {
    return this[0].toAddress();
  }

  get token(): Address {
    return this[1].toAddress();
  }

  get total(): BigInt {
    return this[2].toBigInt();
  }

  get remaining(): BigInt {
    return this[3].toBigInt();
  }

  get start(): BigInt {
    return this[4].toBigInt();
  }
}

export class Beanstalk__rainResultValue0Struct extends ethereum.Tuple {
  get depreciated(): BigInt {
    return this[0].toBigInt();
  }

  get pods(): BigInt {
    return this[1].toBigInt();
  }

  get roots(): BigInt {
    return this[2].toBigInt();
  }
}

export class Beanstalk__timeResultValue0Struct extends ethereum.Tuple {
  get current(): BigInt {
    return this[0].toBigInt();
  }

  get lastSop(): BigInt {
    return this[1].toBigInt();
  }

  get withdrawSeasons(): i32 {
    return this[2].toI32();
  }

  get lastSopSeason(): BigInt {
    return this[3].toBigInt();
  }

  get rainStart(): BigInt {
    return this[4].toBigInt();
  }

  get raining(): boolean {
    return this[5].toBoolean();
  }

  get fertilizing(): boolean {
    return this[6].toBoolean();
  }

  get start(): BigInt {
    return this[7].toBigInt();
  }

  get period(): BigInt {
    return this[8].toBigInt();
  }

  get timestamp(): BigInt {
    return this[9].toBigInt();
  }
}

export class Beanstalk__weatherResultValue0Struct extends ethereum.Tuple {
  get startSoil(): BigInt {
    return this[0].toBigInt();
  }

  get lastDSoil(): BigInt {
    return this[1].toBigInt();
  }

  get lastSoilPercent(): BigInt {
    return this[2].toBigInt();
  }

  get lastSowTime(): BigInt {
    return this[3].toBigInt();
  }

  get nextSowTime(): BigInt {
    return this[4].toBigInt();
  }

  get weatherYield(): BigInt {
    return this[5].toBigInt();
  }

  get didSowBelowMin(): boolean {
    return this[6].toBoolean();
  }

  get didSowFaster(): boolean {
    return this[7].toBoolean();
  }
}

export class Beanstalk__balanceOfSopResultSopStruct extends ethereum.Tuple {
  get lastRain(): BigInt {
    return this[0].toBigInt();
  }

  get lastSop(): BigInt {
    return this[1].toBigInt();
  }

  get roots(): BigInt {
    return this[2].toBigInt();
  }

  get plentyPerRoot(): BigInt {
    return this[3].toBigInt();
  }

  get plenty(): BigInt {
    return this[4].toBigInt();
  }
}

export class Beanstalk__getDepositResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Beanstalk__tokenSettingsResultValue0Struct extends ethereum.Tuple {
  get selector(): Bytes {
    return this[0].toBytes();
  }

  get seeds(): BigInt {
    return this[1].toBigInt();
  }

  get stalk(): BigInt {
    return this[2].toBigInt();
  }
}

export class Beanstalk__getAllBalanceResultBStruct extends ethereum.Tuple {
  get internalBalance(): BigInt {
    return this[0].toBigInt();
  }

  get externalBalance(): BigInt {
    return this[1].toBigInt();
  }

  get totalBalance(): BigInt {
    return this[2].toBigInt();
  }
}

export class Beanstalk__getAllBalancesResultBalancesStruct extends ethereum.Tuple {
  get internalBalance(): BigInt {
    return this[0].toBigInt();
  }

  get externalBalance(): BigInt {
    return this[1].toBigInt();
  }

  get totalBalance(): BigInt {
    return this[2].toBigInt();
  }
}

export class Beanstalk extends ethereum.SmartContract {
  static bind(address: Address): Beanstalk {
    return new Beanstalk("Beanstalk", address);
  }

  bdv(token: Address, amount: BigInt): BigInt {
    let result = super.call("bdv", "bdv(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_bdv(token: Address, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bdv", "bdv(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  beanToBDV(amount: BigInt): BigInt {
    let result = super.call("beanToBDV", "beanToBDV(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_beanToBDV(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("beanToBDV", "beanToBDV(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  curveToBDV(amount: BigInt): BigInt {
    let result = super.call("curveToBDV", "curveToBDV(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_curveToBDV(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("curveToBDV", "curveToBDV(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unripeBeanToBDV(amount: BigInt): BigInt {
    let result = super.call(
      "unripeBeanToBDV",
      "unripeBeanToBDV(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_unripeBeanToBDV(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unripeBeanToBDV",
      "unripeBeanToBDV(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unripeLPToBDV(amount: BigInt): BigInt {
    let result = super.call(
      "unripeLPToBDV",
      "unripeLPToBDV(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_unripeLPToBDV(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unripeLPToBDV",
      "unripeLPToBDV(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAmountOut(tokenIn: Address, tokenOut: Address, amountIn: BigInt): BigInt {
    let result = super.call(
      "getAmountOut",
      "getAmountOut(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(amountIn)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAmountOut(
    tokenIn: Address,
    tokenOut: Address,
    amountIn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAmountOut",
      "getAmountOut(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(amountIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxAmountIn(tokenIn: Address, tokenOut: Address): BigInt {
    let result = super.call(
      "getMaxAmountIn",
      "getMaxAmountIn(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMaxAmountIn(
    tokenIn: Address,
    tokenOut: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxAmountIn",
      "getMaxAmountIn(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  facetAddress(_functionSelector: Bytes): Address {
    let result = super.call("facetAddress", "facetAddress(bytes4):(address)", [
      ethereum.Value.fromFixedBytes(_functionSelector)
    ]);

    return result[0].toAddress();
  }

  try_facetAddress(_functionSelector: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "facetAddress",
      "facetAddress(bytes4):(address)",
      [ethereum.Value.fromFixedBytes(_functionSelector)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  facetAddresses(): Array<Address> {
    let result = super.call(
      "facetAddresses",
      "facetAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_facetAddresses(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "facetAddresses",
      "facetAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  facetFunctionSelectors(_facet: Address): Array<Bytes> {
    let result = super.call(
      "facetFunctionSelectors",
      "facetFunctionSelectors(address):(bytes4[])",
      [ethereum.Value.fromAddress(_facet)]
    );

    return result[0].toBytesArray();
  }

  try_facetFunctionSelectors(
    _facet: Address
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "facetFunctionSelectors",
      "facetFunctionSelectors(address):(bytes4[])",
      [ethereum.Value.fromAddress(_facet)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  facets(): Array<Beanstalk__facetsResultFacets_Struct> {
    let result = super.call("facets", "facets():((address,bytes4[])[])", []);

    return result[0].toTupleArray<Beanstalk__facetsResultFacets_Struct>();
  }

  try_facets(): ethereum.CallResult<
    Array<Beanstalk__facetsResultFacets_Struct>
  > {
    let result = super.tryCall("facets", "facets():((address,bytes4[])[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Beanstalk__facetsResultFacets_Struct>()
    );
  }

  supportsInterface(_interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(_interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOfBatchFertilizer(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): Array<Beanstalk__balanceOfBatchFertilizerResultValue0Struct> {
    let result = super.call(
      "balanceOfBatchFertilizer",
      "balanceOfBatchFertilizer(address[],uint256[]):((uint128,uint128)[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toTupleArray<
      Beanstalk__balanceOfBatchFertilizerResultValue0Struct
    >();
  }

  try_balanceOfBatchFertilizer(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<
    Array<Beanstalk__balanceOfBatchFertilizerResultValue0Struct>
  > {
    let result = super.tryCall(
      "balanceOfBatchFertilizer",
      "balanceOfBatchFertilizer(address[],uint256[]):((uint128,uint128)[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        Beanstalk__balanceOfBatchFertilizerResultValue0Struct
      >()
    );
  }

  balanceOfFertilized(account: Address, ids: Array<BigInt>): BigInt {
    let result = super.call(
      "balanceOfFertilized",
      "balanceOfFertilized(address,uint256[]):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOfFertilized(
    account: Address,
    ids: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfFertilized",
      "balanceOfFertilized(address,uint256[]):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfFertilizer(
    account: Address,
    id: BigInt
  ): Beanstalk__balanceOfFertilizerResultValue0Struct {
    let result = super.call(
      "balanceOfFertilizer",
      "balanceOfFertilizer(address,uint256):((uint128,uint128))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return changetype<Beanstalk__balanceOfFertilizerResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_balanceOfFertilizer(
    account: Address,
    id: BigInt
  ): ethereum.CallResult<Beanstalk__balanceOfFertilizerResultValue0Struct> {
    let result = super.tryCall(
      "balanceOfFertilizer",
      "balanceOfFertilizer(address,uint256):((uint128,uint128))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__balanceOfFertilizerResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  balanceOfUnfertilized(account: Address, ids: Array<BigInt>): BigInt {
    let result = super.call(
      "balanceOfUnfertilized",
      "balanceOfUnfertilized(address,uint256[]):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOfUnfertilized(
    account: Address,
    ids: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfUnfertilized",
      "balanceOfUnfertilized(address,uint256[]):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  beansPerFertilizer(): BigInt {
    let result = super.call(
      "beansPerFertilizer",
      "beansPerFertilizer():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_beansPerFertilizer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "beansPerFertilizer",
      "beansPerFertilizer():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getActiveFertilizer(): BigInt {
    let result = super.call(
      "getActiveFertilizer",
      "getActiveFertilizer():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getActiveFertilizer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getActiveFertilizer",
      "getActiveFertilizer():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEndBpf(): BigInt {
    let result = super.call("getEndBpf", "getEndBpf():(uint128)", []);

    return result[0].toBigInt();
  }

  try_getEndBpf(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getEndBpf", "getEndBpf():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFertilizer(id: BigInt): BigInt {
    let result = super.call(
      "getFertilizer",
      "getFertilizer(uint128):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_getFertilizer(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFertilizer",
      "getFertilizer(uint128):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFirst(): BigInt {
    let result = super.call("getFirst", "getFirst():(uint128)", []);

    return result[0].toBigInt();
  }

  try_getFirst(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getFirst", "getFirst():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHumidity(id: BigInt): BigInt {
    let result = super.call("getHumidity", "getHumidity(uint128):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_getHumidity(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getHumidity",
      "getHumidity(uint128):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLast(): BigInt {
    let result = super.call("getLast", "getLast():(uint128)", []);

    return result[0].toBigInt();
  }

  try_getLast(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getLast", "getLast():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNext(id: BigInt): BigInt {
    let result = super.call("getNext", "getNext(uint128):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_getNext(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNext", "getNext(uint128):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isFertilizing(): boolean {
    let result = super.call("isFertilizing", "isFertilizing():(bool)", []);

    return result[0].toBoolean();
  }

  try_isFertilizing(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFertilizing", "isFertilizing():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  remainingRecapitalization(): BigInt {
    let result = super.call(
      "remainingRecapitalization",
      "remainingRecapitalization():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_remainingRecapitalization(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "remainingRecapitalization",
      "remainingRecapitalization():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFertilizedBeans(): BigInt {
    let result = super.call(
      "totalFertilizedBeans",
      "totalFertilizedBeans():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalFertilizedBeans(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFertilizedBeans",
      "totalFertilizedBeans():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFertilizerBeans(): BigInt {
    let result = super.call(
      "totalFertilizerBeans",
      "totalFertilizerBeans():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalFertilizerBeans(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFertilizerBeans",
      "totalFertilizerBeans():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUnfertilizedBeans(): BigInt {
    let result = super.call(
      "totalUnfertilizedBeans",
      "totalUnfertilizedBeans():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalUnfertilizedBeans(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUnfertilizedBeans",
      "totalUnfertilizedBeans():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  harvestableIndex(): BigInt {
    let result = super.call(
      "harvestableIndex",
      "harvestableIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_harvestableIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "harvestableIndex",
      "harvestableIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  plot(account: Address, plotId: BigInt): BigInt {
    let result = super.call("plot", "plot(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);

    return result[0].toBigInt();
  }

  try_plot(account: Address, plotId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("plot", "plot(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  podIndex(): BigInt {
    let result = super.call("podIndex", "podIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_podIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("podIndex", "podIndex():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalHarvestable(): BigInt {
    let result = super.call(
      "totalHarvestable",
      "totalHarvestable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalHarvestable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalHarvestable",
      "totalHarvestable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalHarvested(): BigInt {
    let result = super.call("totalHarvested", "totalHarvested():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalHarvested(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalHarvested",
      "totalHarvested():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPods(): BigInt {
    let result = super.call("totalPods", "totalPods():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalPods(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalPods", "totalPods():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSoil(): BigInt {
    let result = super.call("totalSoil", "totalSoil():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSoil(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSoil", "totalSoil():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUnharvestable(): BigInt {
    let result = super.call(
      "totalUnharvestable",
      "totalUnharvestable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalUnharvestable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUnharvestable",
      "totalUnharvestable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fundingToken(id: BigInt): Address {
    let result = super.call("fundingToken", "fundingToken(uint32):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toAddress();
  }

  try_fundingToken(id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fundingToken",
      "fundingToken(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundraiser(id: BigInt): Beanstalk__fundraiserResultValue0Struct {
    let result = super.call(
      "fundraiser",
      "fundraiser(uint32):((address,address,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return changetype<Beanstalk__fundraiserResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_fundraiser(
    id: BigInt
  ): ethereum.CallResult<Beanstalk__fundraiserResultValue0Struct> {
    let result = super.tryCall(
      "fundraiser",
      "fundraiser(uint32):((address,address,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__fundraiserResultValue0Struct>(value[0].toTuple())
    );
  }

  numberOfFundraisers(): BigInt {
    let result = super.call(
      "numberOfFundraisers",
      "numberOfFundraisers():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberOfFundraisers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfFundraisers",
      "numberOfFundraisers():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  remainingFunding(id: BigInt): BigInt {
    let result = super.call(
      "remainingFunding",
      "remainingFunding(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_remainingFunding(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "remainingFunding",
      "remainingFunding(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFunding(id: BigInt): BigInt {
    let result = super.call("totalFunding", "totalFunding(uint32):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_totalFunding(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFunding",
      "totalFunding(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowancePods(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowancePods",
      "allowancePods(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowancePods(
    owner: Address,
    spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowancePods",
      "allowancePods(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  podListing(index: BigInt): Bytes {
    let result = super.call("podListing", "podListing(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBytes();
  }

  try_podListing(index: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("podListing", "podListing(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  podOrder(account: Address, pricePerPod: i32, maxPlaceInLine: BigInt): BigInt {
    let result = super.call(
      "podOrder",
      "podOrder(address,uint24,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pricePerPod)),
        ethereum.Value.fromUnsignedBigInt(maxPlaceInLine)
      ]
    );

    return result[0].toBigInt();
  }

  try_podOrder(
    account: Address,
    pricePerPod: i32,
    maxPlaceInLine: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "podOrder",
      "podOrder(address,uint24,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pricePerPod)),
        ethereum.Value.fromUnsignedBigInt(maxPlaceInLine)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  podOrderById(id: Bytes): BigInt {
    let result = super.call("podOrderById", "podOrderById(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(id)
    ]);

    return result[0].toBigInt();
  }

  try_podOrderById(id: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "podOrderById",
      "podOrderById(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  plentyPerRoot(season: BigInt): BigInt {
    let result = super.call(
      "plentyPerRoot",
      "plentyPerRoot(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(season)]
    );

    return result[0].toBigInt();
  }

  try_plentyPerRoot(season: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "plentyPerRoot",
      "plentyPerRoot(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(season)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolDeltaB(pool: Address): BigInt {
    let result = super.call("poolDeltaB", "poolDeltaB(address):(int256)", [
      ethereum.Value.fromAddress(pool)
    ]);

    return result[0].toBigInt();
  }

  try_poolDeltaB(pool: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolDeltaB", "poolDeltaB(address):(int256)", [
      ethereum.Value.fromAddress(pool)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rain(): Beanstalk__rainResultValue0Struct {
    let result = super.call("rain", "rain():((uint256,uint256,uint256))", []);

    return changetype<Beanstalk__rainResultValue0Struct>(result[0].toTuple());
  }

  try_rain(): ethereum.CallResult<Beanstalk__rainResultValue0Struct> {
    let result = super.tryCall(
      "rain",
      "rain():((uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__rainResultValue0Struct>(value[0].toTuple())
    );
  }

  season(): BigInt {
    let result = super.call("season", "season():(uint32)", []);

    return result[0].toBigInt();
  }

  try_season(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("season", "season():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seasonTime(): BigInt {
    let result = super.call("seasonTime", "seasonTime():(uint32)", []);

    return result[0].toBigInt();
  }

  try_seasonTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("seasonTime", "seasonTime():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  time(): Beanstalk__timeResultValue0Struct {
    let result = super.call(
      "time",
      "time():((uint32,uint32,uint8,uint32,uint32,bool,bool,uint256,uint256,uint256))",
      []
    );

    return changetype<Beanstalk__timeResultValue0Struct>(result[0].toTuple());
  }

  try_time(): ethereum.CallResult<Beanstalk__timeResultValue0Struct> {
    let result = super.tryCall(
      "time",
      "time():((uint32,uint32,uint8,uint32,uint32,bool,bool,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__timeResultValue0Struct>(value[0].toTuple())
    );
  }

  totalDeltaB(): BigInt {
    let result = super.call("totalDeltaB", "totalDeltaB():(int256)", []);

    return result[0].toBigInt();
  }

  try_totalDeltaB(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalDeltaB", "totalDeltaB():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weather(): Beanstalk__weatherResultValue0Struct {
    let result = super.call(
      "weather",
      "weather():((uint256,uint256,uint96,uint32,uint32,uint32,bool,bool))",
      []
    );

    return changetype<Beanstalk__weatherResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_weather(): ethereum.CallResult<Beanstalk__weatherResultValue0Struct> {
    let result = super.tryCall(
      "weather",
      "weather():((uint256,uint256,uint96,uint32,uint32,uint32,bool,bool))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__weatherResultValue0Struct>(value[0].toTuple())
    );
  }

  yield(): BigInt {
    let result = super.call("yield", "yield():(uint32)", []);

    return result[0].toBigInt();
  }

  try_yield(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("yield", "yield():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfEarnedBeans(account: Address): BigInt {
    let result = super.call(
      "balanceOfEarnedBeans",
      "balanceOfEarnedBeans(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfEarnedBeans(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfEarnedBeans",
      "balanceOfEarnedBeans(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfEarnedSeeds(account: Address): BigInt {
    let result = super.call(
      "balanceOfEarnedSeeds",
      "balanceOfEarnedSeeds(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfEarnedSeeds(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfEarnedSeeds",
      "balanceOfEarnedSeeds(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfEarnedStalk(account: Address): BigInt {
    let result = super.call(
      "balanceOfEarnedStalk",
      "balanceOfEarnedStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfEarnedStalk(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfEarnedStalk",
      "balanceOfEarnedStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfGrownStalk(account: Address): BigInt {
    let result = super.call(
      "balanceOfGrownStalk",
      "balanceOfGrownStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfGrownStalk(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfGrownStalk",
      "balanceOfGrownStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfPlenty(account: Address): BigInt {
    let result = super.call(
      "balanceOfPlenty",
      "balanceOfPlenty(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfPlenty(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfPlenty",
      "balanceOfPlenty(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfRainRoots(account: Address): BigInt {
    let result = super.call(
      "balanceOfRainRoots",
      "balanceOfRainRoots(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfRainRoots(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfRainRoots",
      "balanceOfRainRoots(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfRoots(account: Address): BigInt {
    let result = super.call(
      "balanceOfRoots",
      "balanceOfRoots(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfRoots(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfRoots",
      "balanceOfRoots(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfSeeds(account: Address): BigInt {
    let result = super.call(
      "balanceOfSeeds",
      "balanceOfSeeds(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfSeeds(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfSeeds",
      "balanceOfSeeds(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfSop(account: Address): Beanstalk__balanceOfSopResultSopStruct {
    let result = super.call(
      "balanceOfSop",
      "balanceOfSop(address):((uint32,uint32,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(account)]
    );

    return changetype<Beanstalk__balanceOfSopResultSopStruct>(
      result[0].toTuple()
    );
  }

  try_balanceOfSop(
    account: Address
  ): ethereum.CallResult<Beanstalk__balanceOfSopResultSopStruct> {
    let result = super.tryCall(
      "balanceOfSop",
      "balanceOfSop(address):((uint32,uint32,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__balanceOfSopResultSopStruct>(value[0].toTuple())
    );
  }

  balanceOfStalk(account: Address): BigInt {
    let result = super.call(
      "balanceOfStalk",
      "balanceOfStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfStalk(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfStalk",
      "balanceOfStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDeposit(
    account: Address,
    token: Address,
    season: BigInt
  ): Beanstalk__getDepositResult {
    let result = super.call(
      "getDeposit",
      "getDeposit(address,address,uint32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(season)
      ]
    );

    return new Beanstalk__getDepositResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getDeposit(
    account: Address,
    token: Address,
    season: BigInt
  ): ethereum.CallResult<Beanstalk__getDepositResult> {
    let result = super.tryCall(
      "getDeposit",
      "getDeposit(address,address,uint32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(season)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Beanstalk__getDepositResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getTotalDeposited(token: Address): BigInt {
    let result = super.call(
      "getTotalDeposited",
      "getTotalDeposited(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getTotalDeposited(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalDeposited",
      "getTotalDeposited(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalWithdrawn(token: Address): BigInt {
    let result = super.call(
      "getTotalWithdrawn",
      "getTotalWithdrawn(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getTotalWithdrawn(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalWithdrawn",
      "getTotalWithdrawn(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWithdrawal(account: Address, token: Address, season: BigInt): BigInt {
    let result = super.call(
      "getWithdrawal",
      "getWithdrawal(address,address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(season)
      ]
    );

    return result[0].toBigInt();
  }

  try_getWithdrawal(
    account: Address,
    token: Address,
    season: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWithdrawal",
      "getWithdrawal(address,address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(season)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastSeasonOfPlenty(): BigInt {
    let result = super.call(
      "lastSeasonOfPlenty",
      "lastSeasonOfPlenty():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastSeasonOfPlenty(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastSeasonOfPlenty",
      "lastSeasonOfPlenty():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastUpdate(account: Address): BigInt {
    let result = super.call("lastUpdate", "lastUpdate(address):(uint32)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_lastUpdate(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastUpdate", "lastUpdate(address):(uint32)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenSettings(token: Address): Beanstalk__tokenSettingsResultValue0Struct {
    let result = super.call(
      "tokenSettings",
      "tokenSettings(address):((bytes4,uint32,uint32))",
      [ethereum.Value.fromAddress(token)]
    );

    return changetype<Beanstalk__tokenSettingsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_tokenSettings(
    token: Address
  ): ethereum.CallResult<Beanstalk__tokenSettingsResultValue0Struct> {
    let result = super.tryCall(
      "tokenSettings",
      "tokenSettings(address):((bytes4,uint32,uint32))",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__tokenSettingsResultValue0Struct>(value[0].toTuple())
    );
  }

  totalEarnedBeans(): BigInt {
    let result = super.call(
      "totalEarnedBeans",
      "totalEarnedBeans():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalEarnedBeans(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalEarnedBeans",
      "totalEarnedBeans():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRoots(): BigInt {
    let result = super.call("totalRoots", "totalRoots():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalRoots(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalRoots", "totalRoots():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSeeds(): BigInt {
    let result = super.call("totalSeeds", "totalSeeds():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSeeds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSeeds", "totalSeeds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStalk(): BigInt {
    let result = super.call("totalStalk", "totalStalk():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStalk(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStalk", "totalStalk():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawFreeze(): i32 {
    let result = super.call("withdrawFreeze", "withdrawFreeze():(uint8)", []);

    return result[0].toI32();
  }

  try_withdrawFreeze(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "withdrawFreeze",
      "withdrawFreeze():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getAllBalance(
    account: Address,
    token: Address
  ): Beanstalk__getAllBalanceResultBStruct {
    let result = super.call(
      "getAllBalance",
      "getAllBalance(address,address):((uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );

    return changetype<Beanstalk__getAllBalanceResultBStruct>(
      result[0].toTuple()
    );
  }

  try_getAllBalance(
    account: Address,
    token: Address
  ): ethereum.CallResult<Beanstalk__getAllBalanceResultBStruct> {
    let result = super.tryCall(
      "getAllBalance",
      "getAllBalance(address,address):((uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Beanstalk__getAllBalanceResultBStruct>(value[0].toTuple())
    );
  }

  getAllBalances(
    account: Address,
    tokens: Array<Address>
  ): Array<Beanstalk__getAllBalancesResultBalancesStruct> {
    let result = super.call(
      "getAllBalances",
      "getAllBalances(address,address[]):((uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );

    return result[0].toTupleArray<
      Beanstalk__getAllBalancesResultBalancesStruct
    >();
  }

  try_getAllBalances(
    account: Address,
    tokens: Array<Address>
  ): ethereum.CallResult<Array<Beanstalk__getAllBalancesResultBalancesStruct>> {
    let result = super.tryCall(
      "getAllBalances",
      "getAllBalances(address,address[]):((uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Beanstalk__getAllBalancesResultBalancesStruct>()
    );
  }

  getBalance(account: Address, token: Address): BigInt {
    let result = super.call(
      "getBalance",
      "getBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getBalance(
    account: Address,
    token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBalance",
      "getBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBalances(account: Address, tokens: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getBalances",
      "getBalances(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getBalances(
    account: Address,
    tokens: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getBalances",
      "getBalances(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getExternalBalance(account: Address, token: Address): BigInt {
    let result = super.call(
      "getExternalBalance",
      "getExternalBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getExternalBalance(
    account: Address,
    token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExternalBalance",
      "getExternalBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExternalBalances(account: Address, tokens: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getExternalBalances",
      "getExternalBalances(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getExternalBalances(
    account: Address,
    tokens: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getExternalBalances",
      "getExternalBalances(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getInternalBalance(account: Address, token: Address): BigInt {
    let result = super.call(
      "getInternalBalance",
      "getInternalBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getInternalBalance(
    account: Address,
    token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInternalBalance",
      "getInternalBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInternalBalances(account: Address, tokens: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getInternalBalances",
      "getInternalBalances(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getInternalBalances(
    account: Address,
    tokens: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getInternalBalances",
      "getInternalBalances(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  balanceOfPenalizedUnderlying(unripeToken: Address, account: Address): BigInt {
    let result = super.call(
      "balanceOfPenalizedUnderlying",
      "balanceOfPenalizedUnderlying(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(unripeToken),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOfPenalizedUnderlying(
    unripeToken: Address,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfPenalizedUnderlying",
      "balanceOfPenalizedUnderlying(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(unripeToken),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfUnderlying(unripeToken: Address, account: Address): BigInt {
    let result = super.call(
      "balanceOfUnderlying",
      "balanceOfUnderlying(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(unripeToken),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOfUnderlying(
    unripeToken: Address,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfUnderlying",
      "balanceOfUnderlying(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(unripeToken),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPenalizedUnderlying(unripeToken: Address, amount: BigInt): BigInt {
    let result = super.call(
      "getPenalizedUnderlying",
      "getPenalizedUnderlying(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(unripeToken),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPenalizedUnderlying(
    unripeToken: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPenalizedUnderlying",
      "getPenalizedUnderlying(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(unripeToken),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPenalty(unripeToken: Address): BigInt {
    let result = super.call("getPenalty", "getPenalty(address):(uint256)", [
      ethereum.Value.fromAddress(unripeToken)
    ]);

    return result[0].toBigInt();
  }

  try_getPenalty(unripeToken: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPenalty", "getPenalty(address):(uint256)", [
      ethereum.Value.fromAddress(unripeToken)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPercentPenalty(unripeToken: Address): BigInt {
    let result = super.call(
      "getPercentPenalty",
      "getPercentPenalty(address):(uint256)",
      [ethereum.Value.fromAddress(unripeToken)]
    );

    return result[0].toBigInt();
  }

  try_getPercentPenalty(unripeToken: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPercentPenalty",
      "getPercentPenalty(address):(uint256)",
      [ethereum.Value.fromAddress(unripeToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRecapFundedPercent(unripeToken: Address): BigInt {
    let result = super.call(
      "getRecapFundedPercent",
      "getRecapFundedPercent(address):(uint256)",
      [ethereum.Value.fromAddress(unripeToken)]
    );

    return result[0].toBigInt();
  }

  try_getRecapFundedPercent(unripeToken: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRecapFundedPercent",
      "getRecapFundedPercent(address):(uint256)",
      [ethereum.Value.fromAddress(unripeToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRecapPaidPercent(): BigInt {
    let result = super.call(
      "getRecapPaidPercent",
      "getRecapPaidPercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRecapPaidPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRecapPaidPercent",
      "getRecapPaidPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalUnderlying(unripeToken: Address): BigInt {
    let result = super.call(
      "getTotalUnderlying",
      "getTotalUnderlying(address):(uint256)",
      [ethereum.Value.fromAddress(unripeToken)]
    );

    return result[0].toBigInt();
  }

  try_getTotalUnderlying(unripeToken: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalUnderlying",
      "getTotalUnderlying(address):(uint256)",
      [ethereum.Value.fromAddress(unripeToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnderlying(unripeToken: Address, amount: BigInt): BigInt {
    let result = super.call(
      "getUnderlying",
      "getUnderlying(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(unripeToken),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getUnderlying(
    unripeToken: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUnderlying",
      "getUnderlying(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(unripeToken),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnderlyingPerUnripeToken(unripeToken: Address): BigInt {
    let result = super.call(
      "getUnderlyingPerUnripeToken",
      "getUnderlyingPerUnripeToken(address):(uint256)",
      [ethereum.Value.fromAddress(unripeToken)]
    );

    return result[0].toBigInt();
  }

  try_getUnderlyingPerUnripeToken(
    unripeToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUnderlyingPerUnripeToken",
      "getUnderlyingPerUnripeToken(address):(uint256)",
      [ethereum.Value.fromAddress(unripeToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isUnripe(unripeToken: Address): boolean {
    let result = super.call("isUnripe", "isUnripe(address):(bool)", [
      ethereum.Value.fromAddress(unripeToken)
    ]);

    return result[0].toBoolean();
  }

  try_isUnripe(unripeToken: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isUnripe", "isUnripe(address):(bool)", [
      ethereum.Value.fromAddress(unripeToken)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConvertCall extends ethereum.Call {
  get inputs(): ConvertCall__Inputs {
    return new ConvertCall__Inputs(this);
  }

  get outputs(): ConvertCall__Outputs {
    return new ConvertCall__Outputs(this);
  }
}

export class ConvertCall__Inputs {
  _call: ConvertCall;

  constructor(call: ConvertCall) {
    this._call = call;
  }

  get convertData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get crates(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class ConvertCall__Outputs {
  _call: ConvertCall;

  constructor(call: ConvertCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get minAmountOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get stable(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get fromMode(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get toMode(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }
}

export class ExchangeCall extends ethereum.Call {
  get inputs(): ExchangeCall__Inputs {
    return new ExchangeCall__Inputs(this);
  }

  get outputs(): ExchangeCall__Outputs {
    return new ExchangeCall__Outputs(this);
  }
}

export class ExchangeCall__Inputs {
  _call: ExchangeCall;

  constructor(call: ExchangeCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fromToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get toToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get minAmountOut(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get stable(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get fromMode(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get toMode(): i32 {
    return this._call.inputValues[7].value.toI32();
  }
}

export class ExchangeCall__Outputs {
  _call: ExchangeCall;

  constructor(call: ExchangeCall) {
    this._call = call;
  }
}

export class ExchangeUnderlyingCall extends ethereum.Call {
  get inputs(): ExchangeUnderlyingCall__Inputs {
    return new ExchangeUnderlyingCall__Inputs(this);
  }

  get outputs(): ExchangeUnderlyingCall__Outputs {
    return new ExchangeUnderlyingCall__Outputs(this);
  }
}

export class ExchangeUnderlyingCall__Inputs {
  _call: ExchangeUnderlyingCall;

  constructor(call: ExchangeUnderlyingCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fromToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get toToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get minAmountOut(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get fromMode(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get toMode(): i32 {
    return this._call.inputValues[6].value.toI32();
  }
}

export class ExchangeUnderlyingCall__Outputs {
  _call: ExchangeUnderlyingCall;

  constructor(call: ExchangeUnderlyingCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmountsOut(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get stable(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get fromMode(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get toMode(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }
}

export class RemoveLiquidityImbalanceCall extends ethereum.Call {
  get inputs(): RemoveLiquidityImbalanceCall__Inputs {
    return new RemoveLiquidityImbalanceCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityImbalanceCall__Outputs {
    return new RemoveLiquidityImbalanceCall__Outputs(this);
  }
}

export class RemoveLiquidityImbalanceCall__Inputs {
  _call: RemoveLiquidityImbalanceCall;

  constructor(call: RemoveLiquidityImbalanceCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountsOut(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get maxAmountIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get stable(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get fromMode(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get toMode(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class RemoveLiquidityImbalanceCall__Outputs {
  _call: RemoveLiquidityImbalanceCall;

  constructor(call: RemoveLiquidityImbalanceCall) {
    this._call = call;
  }
}

export class RemoveLiquidityOneTokenCall extends ethereum.Call {
  get inputs(): RemoveLiquidityOneTokenCall__Inputs {
    return new RemoveLiquidityOneTokenCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityOneTokenCall__Outputs {
    return new RemoveLiquidityOneTokenCall__Outputs(this);
  }
}

export class RemoveLiquidityOneTokenCall__Inputs {
  _call: RemoveLiquidityOneTokenCall;

  constructor(call: RemoveLiquidityOneTokenCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get toToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minAmountOut(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get stable(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get fromMode(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get toMode(): i32 {
    return this._call.inputValues[6].value.toI32();
  }
}

export class RemoveLiquidityOneTokenCall__Outputs {
  _call: RemoveLiquidityOneTokenCall;

  constructor(call: RemoveLiquidityOneTokenCall) {
    this._call = call;
  }
}

export class DiamondCutCall extends ethereum.Call {
  get inputs(): DiamondCutCall__Inputs {
    return new DiamondCutCall__Inputs(this);
  }

  get outputs(): DiamondCutCall__Outputs {
    return new DiamondCutCall__Outputs(this);
  }
}

export class DiamondCutCall__Inputs {
  _call: DiamondCutCall;

  constructor(call: DiamondCutCall) {
    this._call = call;
  }

  get _diamondCut(): Array<DiamondCutCall_diamondCutStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      DiamondCutCall_diamondCutStruct
    >();
  }

  get _init(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _calldata(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class DiamondCutCall__Outputs {
  _call: DiamondCutCall;

  constructor(call: DiamondCutCall) {
    this._call = call;
  }
}

export class DiamondCutCall_diamondCutStruct extends ethereum.Tuple {
  get facetAddress(): Address {
    return this[0].toAddress();
  }

  get action(): i32 {
    return this[1].toI32();
  }

  get functionSelectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class FarmCall extends ethereum.Call {
  get inputs(): FarmCall__Inputs {
    return new FarmCall__Inputs(this);
  }

  get outputs(): FarmCall__Outputs {
    return new FarmCall__Outputs(this);
  }
}

export class FarmCall__Inputs {
  _call: FarmCall;

  constructor(call: FarmCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class FarmCall__Outputs {
  _call: FarmCall;

  constructor(call: FarmCall) {
    this._call = call;
  }
}

export class AddFertilizerOwnerCall extends ethereum.Call {
  get inputs(): AddFertilizerOwnerCall__Inputs {
    return new AddFertilizerOwnerCall__Inputs(this);
  }

  get outputs(): AddFertilizerOwnerCall__Outputs {
    return new AddFertilizerOwnerCall__Outputs(this);
  }
}

export class AddFertilizerOwnerCall__Inputs {
  _call: AddFertilizerOwnerCall;

  constructor(call: AddFertilizerOwnerCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minLP(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddFertilizerOwnerCall__Outputs {
  _call: AddFertilizerOwnerCall;

  constructor(call: AddFertilizerOwnerCall) {
    this._call = call;
  }
}

export class ClaimFertilizedCall extends ethereum.Call {
  get inputs(): ClaimFertilizedCall__Inputs {
    return new ClaimFertilizedCall__Inputs(this);
  }

  get outputs(): ClaimFertilizedCall__Outputs {
    return new ClaimFertilizedCall__Outputs(this);
  }
}

export class ClaimFertilizedCall__Inputs {
  _call: ClaimFertilizedCall;

  constructor(call: ClaimFertilizedCall) {
    this._call = call;
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get mode(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class ClaimFertilizedCall__Outputs {
  _call: ClaimFertilizedCall;

  constructor(call: ClaimFertilizedCall) {
    this._call = call;
  }
}

export class MintFertilizerCall extends ethereum.Call {
  get inputs(): MintFertilizerCall__Inputs {
    return new MintFertilizerCall__Inputs(this);
  }

  get outputs(): MintFertilizerCall__Outputs {
    return new MintFertilizerCall__Outputs(this);
  }
}

export class MintFertilizerCall__Inputs {
  _call: MintFertilizerCall;

  constructor(call: MintFertilizerCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minLP(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get mode(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class MintFertilizerCall__Outputs {
  _call: MintFertilizerCall;

  constructor(call: MintFertilizerCall) {
    this._call = call;
  }
}

export class PayFertilizerCall extends ethereum.Call {
  get inputs(): PayFertilizerCall__Inputs {
    return new PayFertilizerCall__Inputs(this);
  }

  get outputs(): PayFertilizerCall__Outputs {
    return new PayFertilizerCall__Outputs(this);
  }
}

export class PayFertilizerCall__Inputs {
  _call: PayFertilizerCall;

  constructor(call: PayFertilizerCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PayFertilizerCall__Outputs {
  _call: PayFertilizerCall;

  constructor(call: PayFertilizerCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }

  get plots(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get mode(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class SowCall extends ethereum.Call {
  get inputs(): SowCall__Inputs {
    return new SowCall__Inputs(this);
  }

  get outputs(): SowCall__Outputs {
    return new SowCall__Outputs(this);
  }
}

export class SowCall__Inputs {
  _call: SowCall;

  constructor(call: SowCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get mode(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SowCall__Outputs {
  _call: SowCall;

  constructor(call: SowCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SowWithMinCall extends ethereum.Call {
  get inputs(): SowWithMinCall__Inputs {
    return new SowWithMinCall__Inputs(this);
  }

  get outputs(): SowWithMinCall__Outputs {
    return new SowWithMinCall__Outputs(this);
  }
}

export class SowWithMinCall__Inputs {
  _call: SowWithMinCall;

  constructor(call: SowWithMinCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get mode(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class SowWithMinCall__Outputs {
  _call: SowWithMinCall;

  constructor(call: SowWithMinCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateFundraiserCall extends ethereum.Call {
  get inputs(): CreateFundraiserCall__Inputs {
    return new CreateFundraiserCall__Inputs(this);
  }

  get outputs(): CreateFundraiserCall__Outputs {
    return new CreateFundraiserCall__Outputs(this);
  }
}

export class CreateFundraiserCall__Inputs {
  _call: CreateFundraiserCall;

  constructor(call: CreateFundraiserCall) {
    this._call = call;
  }

  get payee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateFundraiserCall__Outputs {
  _call: CreateFundraiserCall;

  constructor(call: CreateFundraiserCall) {
    this._call = call;
  }
}

export class FundCall extends ethereum.Call {
  get inputs(): FundCall__Inputs {
    return new FundCall__Inputs(this);
  }

  get outputs(): FundCall__Outputs {
    return new FundCall__Outputs(this);
  }
}

export class FundCall__Inputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get mode(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class FundCall__Outputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApprovePodsCall extends ethereum.Call {
  get inputs(): ApprovePodsCall__Inputs {
    return new ApprovePodsCall__Inputs(this);
  }

  get outputs(): ApprovePodsCall__Outputs {
    return new ApprovePodsCall__Outputs(this);
  }
}

export class ApprovePodsCall__Inputs {
  _call: ApprovePodsCall;

  constructor(call: ApprovePodsCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApprovePodsCall__Outputs {
  _call: ApprovePodsCall;

  constructor(call: ApprovePodsCall) {
    this._call = call;
  }
}

export class CancelPodListingCall extends ethereum.Call {
  get inputs(): CancelPodListingCall__Inputs {
    return new CancelPodListingCall__Inputs(this);
  }

  get outputs(): CancelPodListingCall__Outputs {
    return new CancelPodListingCall__Outputs(this);
  }
}

export class CancelPodListingCall__Inputs {
  _call: CancelPodListingCall;

  constructor(call: CancelPodListingCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelPodListingCall__Outputs {
  _call: CancelPodListingCall;

  constructor(call: CancelPodListingCall) {
    this._call = call;
  }
}

export class CancelPodOrderCall extends ethereum.Call {
  get inputs(): CancelPodOrderCall__Inputs {
    return new CancelPodOrderCall__Inputs(this);
  }

  get outputs(): CancelPodOrderCall__Outputs {
    return new CancelPodOrderCall__Outputs(this);
  }
}

export class CancelPodOrderCall__Inputs {
  _call: CancelPodOrderCall;

  constructor(call: CancelPodOrderCall) {
    this._call = call;
  }

  get pricePerPod(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get maxPlaceInLine(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get mode(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class CancelPodOrderCall__Outputs {
  _call: CancelPodOrderCall;

  constructor(call: CancelPodOrderCall) {
    this._call = call;
  }
}

export class CreatePodListingCall extends ethereum.Call {
  get inputs(): CreatePodListingCall__Inputs {
    return new CreatePodListingCall__Inputs(this);
  }

  get outputs(): CreatePodListingCall__Outputs {
    return new CreatePodListingCall__Outputs(this);
  }
}

export class CreatePodListingCall__Inputs {
  _call: CreatePodListingCall;

  constructor(call: CreatePodListingCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get start(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get pricePerPod(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get maxHarvestableIndex(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get mode(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class CreatePodListingCall__Outputs {
  _call: CreatePodListingCall;

  constructor(call: CreatePodListingCall) {
    this._call = call;
  }
}

export class CreatePodOrderCall extends ethereum.Call {
  get inputs(): CreatePodOrderCall__Inputs {
    return new CreatePodOrderCall__Inputs(this);
  }

  get outputs(): CreatePodOrderCall__Outputs {
    return new CreatePodOrderCall__Outputs(this);
  }
}

export class CreatePodOrderCall__Inputs {
  _call: CreatePodOrderCall;

  constructor(call: CreatePodOrderCall) {
    this._call = call;
  }

  get beanAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get pricePerPod(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get maxPlaceInLine(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get mode(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class CreatePodOrderCall__Outputs {
  _call: CreatePodOrderCall;

  constructor(call: CreatePodOrderCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class FillPodListingCall extends ethereum.Call {
  get inputs(): FillPodListingCall__Inputs {
    return new FillPodListingCall__Inputs(this);
  }

  get outputs(): FillPodListingCall__Outputs {
    return new FillPodListingCall__Outputs(this);
  }
}

export class FillPodListingCall__Inputs {
  _call: FillPodListingCall;

  constructor(call: FillPodListingCall) {
    this._call = call;
  }

  get l(): FillPodListingCallLStruct {
    return changetype<FillPodListingCallLStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get beanAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get mode(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class FillPodListingCall__Outputs {
  _call: FillPodListingCall;

  constructor(call: FillPodListingCall) {
    this._call = call;
  }
}

export class FillPodListingCallLStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get index(): BigInt {
    return this[1].toBigInt();
  }

  get start(): BigInt {
    return this[2].toBigInt();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get pricePerPod(): i32 {
    return this[4].toI32();
  }

  get maxHarvestableIndex(): BigInt {
    return this[5].toBigInt();
  }

  get mode(): i32 {
    return this[6].toI32();
  }
}

export class FillPodOrderCall extends ethereum.Call {
  get inputs(): FillPodOrderCall__Inputs {
    return new FillPodOrderCall__Inputs(this);
  }

  get outputs(): FillPodOrderCall__Outputs {
    return new FillPodOrderCall__Outputs(this);
  }
}

export class FillPodOrderCall__Inputs {
  _call: FillPodOrderCall;

  constructor(call: FillPodOrderCall) {
    this._call = call;
  }

  get o(): FillPodOrderCallOStruct {
    return changetype<FillPodOrderCallOStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get start(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get mode(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class FillPodOrderCall__Outputs {
  _call: FillPodOrderCall;

  constructor(call: FillPodOrderCall) {
    this._call = call;
  }
}

export class FillPodOrderCallOStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get pricePerPod(): i32 {
    return this[1].toI32();
  }

  get maxPlaceInLine(): BigInt {
    return this[2].toBigInt();
  }
}

export class TransferPlotCall extends ethereum.Call {
  get inputs(): TransferPlotCall__Inputs {
    return new TransferPlotCall__Inputs(this);
  }

  get outputs(): TransferPlotCall__Outputs {
    return new TransferPlotCall__Outputs(this);
  }
}

export class TransferPlotCall__Inputs {
  _call: TransferPlotCall;

  constructor(call: TransferPlotCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get start(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get end(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class TransferPlotCall__Outputs {
  _call: TransferPlotCall;

  constructor(call: TransferPlotCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class SunriseCall extends ethereum.Call {
  get inputs(): SunriseCall__Inputs {
    return new SunriseCall__Inputs(this);
  }

  get outputs(): SunriseCall__Outputs {
    return new SunriseCall__Outputs(this);
  }
}

export class SunriseCall__Inputs {
  _call: SunriseCall;

  constructor(call: SunriseCall) {
    this._call = call;
  }
}

export class SunriseCall__Outputs {
  _call: SunriseCall;

  constructor(call: SunriseCall) {
    this._call = call;
  }
}

export class ClaimPlentyCall extends ethereum.Call {
  get inputs(): ClaimPlentyCall__Inputs {
    return new ClaimPlentyCall__Inputs(this);
  }

  get outputs(): ClaimPlentyCall__Outputs {
    return new ClaimPlentyCall__Outputs(this);
  }
}

export class ClaimPlentyCall__Inputs {
  _call: ClaimPlentyCall;

  constructor(call: ClaimPlentyCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimPlentyCall__Outputs {
  _call: ClaimPlentyCall;

  constructor(call: ClaimPlentyCall) {
    this._call = call;
  }
}

export class ClaimWithdrawalCall extends ethereum.Call {
  get inputs(): ClaimWithdrawalCall__Inputs {
    return new ClaimWithdrawalCall__Inputs(this);
  }

  get outputs(): ClaimWithdrawalCall__Outputs {
    return new ClaimWithdrawalCall__Outputs(this);
  }
}

export class ClaimWithdrawalCall__Inputs {
  _call: ClaimWithdrawalCall;

  constructor(call: ClaimWithdrawalCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get season(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get mode(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class ClaimWithdrawalCall__Outputs {
  _call: ClaimWithdrawalCall;

  constructor(call: ClaimWithdrawalCall) {
    this._call = call;
  }
}

export class ClaimWithdrawalsCall extends ethereum.Call {
  get inputs(): ClaimWithdrawalsCall__Inputs {
    return new ClaimWithdrawalsCall__Inputs(this);
  }

  get outputs(): ClaimWithdrawalsCall__Outputs {
    return new ClaimWithdrawalsCall__Outputs(this);
  }
}

export class ClaimWithdrawalsCall__Inputs {
  _call: ClaimWithdrawalsCall;

  constructor(call: ClaimWithdrawalsCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get seasons(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get mode(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class ClaimWithdrawalsCall__Outputs {
  _call: ClaimWithdrawalsCall;

  constructor(call: ClaimWithdrawalsCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get mode(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class EarnCall extends ethereum.Call {
  get inputs(): EarnCall__Inputs {
    return new EarnCall__Inputs(this);
  }

  get outputs(): EarnCall__Outputs {
    return new EarnCall__Outputs(this);
  }
}

export class EarnCall__Inputs {
  _call: EarnCall;

  constructor(call: EarnCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EarnCall__Outputs {
  _call: EarnCall;

  constructor(call: EarnCall) {
    this._call = call;
  }

  get beans(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferDepositCall extends ethereum.Call {
  get inputs(): TransferDepositCall__Inputs {
    return new TransferDepositCall__Inputs(this);
  }

  get outputs(): TransferDepositCall__Outputs {
    return new TransferDepositCall__Outputs(this);
  }
}

export class TransferDepositCall__Inputs {
  _call: TransferDepositCall;

  constructor(call: TransferDepositCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get season(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferDepositCall__Outputs {
  _call: TransferDepositCall;

  constructor(call: TransferDepositCall) {
    this._call = call;
  }
}

export class TransferDepositsCall extends ethereum.Call {
  get inputs(): TransferDepositsCall__Inputs {
    return new TransferDepositsCall__Inputs(this);
  }

  get outputs(): TransferDepositsCall__Outputs {
    return new TransferDepositsCall__Outputs(this);
  }
}

export class TransferDepositsCall__Inputs {
  _call: TransferDepositsCall;

  constructor(call: TransferDepositsCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get seasons(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class TransferDepositsCall__Outputs {
  _call: TransferDepositsCall;

  constructor(call: TransferDepositsCall) {
    this._call = call;
  }
}

export class UpdateCall extends ethereum.Call {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class UpdateUnripeDepositCall extends ethereum.Call {
  get inputs(): UpdateUnripeDepositCall__Inputs {
    return new UpdateUnripeDepositCall__Inputs(this);
  }

  get outputs(): UpdateUnripeDepositCall__Outputs {
    return new UpdateUnripeDepositCall__Outputs(this);
  }
}

export class UpdateUnripeDepositCall__Inputs {
  _call: UpdateUnripeDepositCall;

  constructor(call: UpdateUnripeDepositCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _season(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateUnripeDepositCall__Outputs {
  _call: UpdateUnripeDepositCall;

  constructor(call: UpdateUnripeDepositCall) {
    this._call = call;
  }
}

export class UpdateUnripeDepositsCall extends ethereum.Call {
  get inputs(): UpdateUnripeDepositsCall__Inputs {
    return new UpdateUnripeDepositsCall__Inputs(this);
  }

  get outputs(): UpdateUnripeDepositsCall__Outputs {
    return new UpdateUnripeDepositsCall__Outputs(this);
  }
}

export class UpdateUnripeDepositsCall__Inputs {
  _call: UpdateUnripeDepositsCall;

  constructor(call: UpdateUnripeDepositsCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get seasons(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class UpdateUnripeDepositsCall__Outputs {
  _call: UpdateUnripeDepositsCall;

  constructor(call: UpdateUnripeDepositsCall) {
    this._call = call;
  }
}

export class WithdrawDepositCall extends ethereum.Call {
  get inputs(): WithdrawDepositCall__Inputs {
    return new WithdrawDepositCall__Inputs(this);
  }

  get outputs(): WithdrawDepositCall__Outputs {
    return new WithdrawDepositCall__Outputs(this);
  }
}

export class WithdrawDepositCall__Inputs {
  _call: WithdrawDepositCall;

  constructor(call: WithdrawDepositCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get season(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawDepositCall__Outputs {
  _call: WithdrawDepositCall;

  constructor(call: WithdrawDepositCall) {
    this._call = call;
  }
}

export class WithdrawDepositsCall extends ethereum.Call {
  get inputs(): WithdrawDepositsCall__Inputs {
    return new WithdrawDepositsCall__Inputs(this);
  }

  get outputs(): WithdrawDepositsCall__Outputs {
    return new WithdrawDepositsCall__Outputs(this);
  }
}

export class WithdrawDepositsCall__Inputs {
  _call: WithdrawDepositsCall;

  constructor(call: WithdrawDepositsCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get seasons(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class WithdrawDepositsCall__Outputs {
  _call: WithdrawDepositsCall;

  constructor(call: WithdrawDepositsCall) {
    this._call = call;
  }
}

export class TransferTokenCall extends ethereum.Call {
  get inputs(): TransferTokenCall__Inputs {
    return new TransferTokenCall__Inputs(this);
  }

  get outputs(): TransferTokenCall__Outputs {
    return new TransferTokenCall__Outputs(this);
  }
}

export class TransferTokenCall__Inputs {
  _call: TransferTokenCall;

  constructor(call: TransferTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get fromMode(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get toMode(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class TransferTokenCall__Outputs {
  _call: TransferTokenCall;

  constructor(call: TransferTokenCall) {
    this._call = call;
  }
}

export class UnwrapEthCall extends ethereum.Call {
  get inputs(): UnwrapEthCall__Inputs {
    return new UnwrapEthCall__Inputs(this);
  }

  get outputs(): UnwrapEthCall__Outputs {
    return new UnwrapEthCall__Outputs(this);
  }
}

export class UnwrapEthCall__Inputs {
  _call: UnwrapEthCall;

  constructor(call: UnwrapEthCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get mode(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class UnwrapEthCall__Outputs {
  _call: UnwrapEthCall;

  constructor(call: UnwrapEthCall) {
    this._call = call;
  }
}

export class WrapEthCall extends ethereum.Call {
  get inputs(): WrapEthCall__Inputs {
    return new WrapEthCall__Inputs(this);
  }

  get outputs(): WrapEthCall__Outputs {
    return new WrapEthCall__Outputs(this);
  }
}

export class WrapEthCall__Inputs {
  _call: WrapEthCall;

  constructor(call: WrapEthCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get mode(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class WrapEthCall__Outputs {
  _call: WrapEthCall;

  constructor(call: WrapEthCall) {
    this._call = call;
  }
}

export class AddUnripeTokenCall extends ethereum.Call {
  get inputs(): AddUnripeTokenCall__Inputs {
    return new AddUnripeTokenCall__Inputs(this);
  }

  get outputs(): AddUnripeTokenCall__Outputs {
    return new AddUnripeTokenCall__Outputs(this);
  }
}

export class AddUnripeTokenCall__Inputs {
  _call: AddUnripeTokenCall;

  constructor(call: AddUnripeTokenCall) {
    this._call = call;
  }

  get unripeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get underlyingToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get root(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class AddUnripeTokenCall__Outputs {
  _call: AddUnripeTokenCall;

  constructor(call: AddUnripeTokenCall) {
    this._call = call;
  }
}

export class ClaimUnripeCall extends ethereum.Call {
  get inputs(): ClaimUnripeCall__Inputs {
    return new ClaimUnripeCall__Inputs(this);
  }

  get outputs(): ClaimUnripeCall__Outputs {
    return new ClaimUnripeCall__Outputs(this);
  }
}

export class ClaimUnripeCall__Inputs {
  _call: ClaimUnripeCall;

  constructor(call: ClaimUnripeCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class ClaimUnripeCall__Outputs {
  _call: ClaimUnripeCall;

  constructor(call: ClaimUnripeCall) {
    this._call = call;
  }
}

export class RipenCall extends ethereum.Call {
  get inputs(): RipenCall__Inputs {
    return new RipenCall__Inputs(this);
  }

  get outputs(): RipenCall__Outputs {
    return new RipenCall__Outputs(this);
  }
}

export class RipenCall__Inputs {
  _call: RipenCall;

  constructor(call: RipenCall) {
    this._call = call;
  }

  get unripeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get mode(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class RipenCall__Outputs {
  _call: RipenCall;

  constructor(call: RipenCall) {
    this._call = call;
  }

  get underlyingAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DewhitelistTokenCall extends ethereum.Call {
  get inputs(): DewhitelistTokenCall__Inputs {
    return new DewhitelistTokenCall__Inputs(this);
  }

  get outputs(): DewhitelistTokenCall__Outputs {
    return new DewhitelistTokenCall__Outputs(this);
  }
}

export class DewhitelistTokenCall__Inputs {
  _call: DewhitelistTokenCall;

  constructor(call: DewhitelistTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DewhitelistTokenCall__Outputs {
  _call: DewhitelistTokenCall;

  constructor(call: DewhitelistTokenCall) {
    this._call = call;
  }
}

export class WhitelistTokenCall extends ethereum.Call {
  get inputs(): WhitelistTokenCall__Inputs {
    return new WhitelistTokenCall__Inputs(this);
  }

  get outputs(): WhitelistTokenCall__Outputs {
    return new WhitelistTokenCall__Outputs(this);
  }
}

export class WhitelistTokenCall__Inputs {
  _call: WhitelistTokenCall;

  constructor(call: WhitelistTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get selector(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get stalk(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get seeds(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class WhitelistTokenCall__Outputs {
  _call: WhitelistTokenCall;

  constructor(call: WhitelistTokenCall) {
    this._call = call;
  }
}
