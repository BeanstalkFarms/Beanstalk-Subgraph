# Some items included in this schema come from the Messari Generic Schema
# Subgraph Schema: Generic
# Version: 1.3.0
# See https://github.com/messari/subgraphs/blob/master/docs/Schema.md for details

enum Network {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BOBA
  BSC # aka BNB Chain
  CELO
  COSMOS
  CRONOS
  MAINNET # Ethereum Mainnet
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC # aka Polygon
  XDAI # aka Gnosis Chain
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
  # Will add more
}

type Token @entity {
  " Smart contract address of the token "
  id: ID!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " Optional field to track the price of a token, mostly for caching purposes "
  lastPriceUSD: BigDecimal

  " Optional field to track the block number of the last token price "
  lastPriceBlockNumber: BigInt
}

enum RewardTokenType {
  " For reward tokens awarded to LPs/lenders "
  DEPOSIT

  " For reward tokens awarded to borrowers "
  BORROW
}

type RewardToken @entity {
  " { Reward token type }-{ Smart contract address of the reward token } "
  id: ID!

  " Reference to the actual token "
  token: Token!

  " The type of the reward token "
  type: RewardTokenType!
}

#############################
##### Protocol Metadata #####
#############################

type Beanstalk @entity {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " Timestamp of the latest DiamondCut call "
  lastUpgrade: BigInt!
  
  " Season specific data "
  seasons: [Season!]! @derivedFrom(field: "beanstalk")
  
  " Silo level data "
  silo: Silo! @derivedFrom(field: "beanstalk")

  " Field level data "
  field: Field! @derivedFrom(field: "beanstalk")

  " Last season called "
  lastSeason: Int!
}

# An entity that holds season level data
type Season @entity {
  " Season Number" 
  id: ID!
  
  " Beanstalk Contract Address "
  beanstalk: Beanstalk!

  " Season number in Int form for sorting "
  season: Int!

  " Block timestamp when sunrise was called "
  timestamp: BigInt!
  
  " Price of BEAN during sunrise "
  price: BigDecimal!

  " Total Bean supply "
  beans: BigInt!

  " Bean Market Cap "
  marketCap: BigDecimal!

  " Time weighted deltaB "
  deltaB: BigInt!

  " Change in Bean supply "
  deltaBeans: BigInt!

  " Amount of Beans minted during sunrise "
  rewardBeans: BigInt!

  " Amount of Beans paid to sunrise caller "
  incentiveBeans: BigInt!

  " New harvestable index for the season "
  harvestableIndex: BigInt!
}

type Silo @entity {
  id: ID!
  beanstalk: Beanstalk!
  farmer: Farmer
  assets: [SiloAsset!]! @derivedFrom(field: "silo")
  totalValueLockedUSD: BigDecimal!
  totalDepositedBDV: BigInt!
  totalStalk: BigInt!
  totalSeeds: BigInt!
  totalRoots: BigInt!
  totalBeanMints: BigInt!
  hourlySnapshots: [SiloHourlySnapshot!]! @derivedFrom(field: "silo")
  dailySnapshots: [SiloDailySnapshot!]! @derivedFrom(field: "silo")
}

type SiloHourlySnapshot @entity {
  id: ID!
  season: Int!
  silo: Silo!
  totalValueLockedUSD: BigDecimal!
  totalDepositedBDV: BigInt!
  totalStalk: BigInt!
  totalSeeds: BigInt!
  totalRoots: BigInt!
  totalBeanMints: BigInt!
  cumulativeDepositedUSD: BigDecimal!
  hourlyDepositedUSD: BigDecimal!
  hourlyDepositedBDV: BigInt!
  hourlyWithdrawnBDV: BigInt!
  hourlyClaimableBDV: BigInt!
  hourlyStalkDelta: BigInt!
  hourlySeedsDelta: BigInt!
  hourlyRootsDelta: BigInt!
  hourlyBeanMints: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type SiloDailySnapshot @entity {
  id: ID!
  season: Int!
  silo: Silo!
  totalValueLockedUSD: BigDecimal!
  totalDepositedBDV: BigInt!
  totalStalk: BigInt!
  totalSeeds: BigInt!
  totalRoots: BigInt!
  totalBeanMints: BigInt!
  cumulativeDepositedUSD: BigDecimal!
  dailyDepositedUSD: BigDecimal!
  dailyDepositedBDV: BigInt!
  dailyWithdrawnBDV: BigInt!
  dailyClaimableBDV: BigInt!
  dailyStalkDelta: BigInt!
  dailySeedsDelta: BigInt!
  dailyRootsDelta: BigInt!
  dailyBeanMints: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type SiloAsset @entity {
  id: ID!
  silo: Silo!
  token: String!
  totalValueLockedUSD: BigDecimal!
  totalDepositedBDV: BigInt!
  totalDepositedAmount: BigInt!
  cumulativeDepositedUSD: BigDecimal!
  totalStalk: BigInt!
  totalSeeds: BigInt!
  hourlySnapshots: [SiloAssetHourlySnapshot!]! @derivedFrom(field: "siloAsset")
  dailySnapshots: [SiloAssetDailySnapshot!]! @derivedFrom(field: "siloAsset")
}

type SiloAssetHourlySnapshot @entity {
  id: ID!
  season: Int!
  siloAsset: SiloAsset!
  totalValueLockedUSD: BigDecimal!
  totalDepositedBDV: BigInt!
  totalDepositedAmount: BigInt!
  totalStalk: BigInt!
  totalSeeds: BigInt!
  cumulativeDepositedUSD: BigDecimal!
  hourlyDepositedUSD: BigDecimal!
  hourlyDepositedBDV: BigInt!
  hourlyDepositedAmount: BigInt!
  hourlyWithdrawnAmount: BigInt!
  hourlyStalkDelta: BigInt!
  hourlySeedsDelta: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type SiloAssetDailySnapshot @entity {
  id: ID!
  season: Int!
  siloAsset: SiloAsset!
  totalValueLockedUSD: BigDecimal!
  totalDepositedBDV: BigInt!
  totalDepositedAmount: BigInt!
  totalStalk: BigInt!
  totalSeeds: BigInt!
  cumulativeDepositedUSD: BigDecimal!
  dailyDepositedUSD: BigDecimal!
  dailyDepositedBDV: BigInt!
  dailyDepositedAmount: BigInt!
  dailyWithdrawnAmount: BigInt!
  dailyStalkDelta: BigInt!
  dailySeedsDelta: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type Field @entity {
  " Contract address for this field or farmer "
  id: ID!
  beanstalk: Beanstalk!
  farmer: Farmer
  season: Int!
  weather: Int!
  realRateOfReturn: BigDecimal!
  totalNumberOfSowers: Int!
  totalNumberOfSows: Int!
  totalSownBeans: BigInt!
  plotIndexes: [BigInt!]!
  totalPods: BigInt!
  totalHarvestablePods: BigInt!
  totalHarvestedPods: BigInt!
  totalSoil: BigInt!
  podIndex: BigInt!
  podRate: BigDecimal!
  hourlySnapshots: [FieldHourlySnapshot!]! @derivedFrom(field: "field")
  dailySnapshots: [FieldDailySnapshot!]! @derivedFrom(field: "field")
}

type FieldHourlySnapshot @entity {
  id: ID!
  field: Field!
  season: Int!
  weather: Int!
  realRateOfReturn: BigDecimal!
  podIndex: BigInt!
  numberOfSowers: Int!
  totalNumberOfSowers: Int!
  numberOfSows: Int!
  totalNumberOfSows: Int!
  sownBeans: BigInt!
  totalSownBeans: BigInt!
  newPods: BigInt!
  totalPods: BigInt!
  newHarvestablePods: BigInt!
  totalHarvestablePods: BigInt!
  newHarvestedPods: BigInt!
  totalHarvestedPods: BigInt!
  newSoil: BigInt!
  totalSoil: BigInt!
  podRate: BigDecimal!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type FieldDailySnapshot @entity {
  id: ID!
  field: Field!
  season: Int!
  weather: Int!
  realRateOfReturn: BigDecimal!
  podIndex: BigInt!
  numberOfSowers: Int!
  totalNumberOfSowers: Int!
  numberOfSows: Int!
  totalNumberOfSows: Int!
  sownBeans: BigInt!
  totalSownBeans: BigInt!
  newPods: BigInt!
  totalPods: BigInt!
  newHarvestablePods: BigInt!
  totalHarvestablePods: BigInt!
  newHarvestedPods: BigInt!
  totalHarvestedPods: BigInt!
  newSoil: BigInt!
  totalSoil: BigInt!
  podRate: BigDecimal!
  blockNumber: BigInt!
  timestamp: BigInt!
}

# ---===== Farmer Account Entities =====---

type Farmer @entity {
  id: ID! # Account
  silo: Silo @derivedFrom(field: "farmer")
  #assets: [FarmerAsset!]! # Add in any circulating information?
  #balances: [FarmerBalance!]!
  deposits: [SiloDeposit!]! @derivedFrom(field: "farmer")
  withdraws: [SiloWithdraw!]! @derivedFrom(field: "farmer")
  field: Field @derivedFrom(field: "farmer")
  plots: [Plot!]! @derivedFrom(field: "farmer")
  listings: [PodListing!]! @derivedFrom(field: "farmer")
  sown: Boolean!
  fertilizers: [FertilizerBalance!]! @derivedFrom(field: "farmer")
}

type SiloDeposit @entity {
  "Account - Token Address - Season"
  id: ID! 
  farmer: Farmer!
  token: String!
  season: Int!
  tokenAmount: BigInt!
  removedTokenAmount: BigInt!
  bdv: BigInt!
  removedBDV: BigInt!
  stalk: BigInt!
  seeds: BigInt!
  hashes: [String!]!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type SiloWithdraw @entity {
  "Account - Deposit Token - Current Season"
  id: ID!
  farmer: Farmer!
  token: String!
  withdrawSeason: Int!
  claimableSeason: Int!
  claimed: Boolean!
  amount: BigInt!
  hash: String!
  createdAt: BigInt!
}

type Plot @entity {
  id: ID! # Index of the plot
  field: Field!
  farmer: Farmer!
  " Event that created the plot "
  source: String!
  listing: PodListing
  season: Int!
  creationHash: String!
  createdAt: BigInt!
  updatedAt: BigInt!
  index: BigInt!
  beans: BigInt!
  pods: BigInt!
  sownPods: BigInt!
  weather: Int!
  harvestablePods: BigInt!
  harvestedPods: BigInt!
  fullyHarvested: Boolean!
}

type PodMarketplace @entity {
  " Contract address of beanstalk or farmer "
  id: ID!
  season: Int!
  listingIndexes: [BigInt!]!
  orders: [PodOrder!]!
  fills: [PodFill!]! @derivedFrom(field: "podMarketplace")
  totalPodsListed: BigInt!
  totalPodsFilled: BigInt!
  totalPodsExpired: BigInt!
  totalPodsCancelled: BigInt!
  totalPodsAvailable: BigInt!
  totalOrdersCreated: BigInt!
  totalOrdersFilled: BigInt!
  totalOrdersCancelled: BigInt!
  totalPodVolume: BigInt!
  totalBeanVolume: BigInt!
  hourlySnapshots: [PodMarketplaceHourlySnapshot!]! @derivedFrom(field: "podMarketplace")
  dailySnapshots: [PodMarketplaceDailySnapshot!]! @derivedFrom(field: "podMarketplace")
}

type PodMarketplaceHourlySnapshot @entity {
  id: ID!
  season: Int!
  podMarketplace: PodMarketplace!
  newPodsListed: BigInt!
  totalPodsListed: BigInt!
  newPodsFilled: BigInt!
  totalPodsFilled: BigInt!
  newPodsExpired: BigInt!
  totalPodsExpired: BigInt!
  newPodsCancelled: BigInt!
  totalPodsCancelled: BigInt!
  newPodsAvailable: BigInt!
  totalPodsAvailable: BigInt!
  newOrdersCreated: BigInt!
  totalOrdersCreated: BigInt!
  newOrdersFilled: BigInt!
  totalOrdersFilled: BigInt!
  newOrdersCancelled: BigInt!
  totalOrdersCancelled: BigInt!
  newPodVolume: BigInt!
  totalPodVolume: BigInt!
  newBeanVolume: BigInt!
  totalBeanVolume: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type PodMarketplaceDailySnapshot @entity {
  id: ID!
  season: Int!
  podMarketplace: PodMarketplace!
  newPodsListed: BigInt!
  totalPodsListed: BigInt!
  newPodsFilled: BigInt!
  totalPodsFilled: BigInt!
  newPodsExpired: BigInt!
  totalPodsExpired: BigInt!
  newPodsCancelled: BigInt!
  totalPodsCancelled: BigInt!
  newPodsAvailable: BigInt!
  totalPodsAvailable: BigInt!
  newOrdersCreated: BigInt!
  totalOrdersCreated: BigInt!
  newOrdersFilled: BigInt!
  totalOrdersFilled: BigInt!
  newOrdersCancelled: BigInt!
  totalOrdersCancelled: BigInt!
  newPodVolume: BigInt!
  totalPodVolume: BigInt!
  newBeanVolume: BigInt!
  totalBeanVolume: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type PodListing @entity {
  id: ID! # the account plus index
  plot: Plot!
  farmer: Farmer!
  createdAt: BigInt!
  updatedAt: BigInt!
  status: String!
  fill: PodFill
  originalIndex: BigInt!
  index: BigInt!
  start: BigInt!
  amount: BigInt!
  totalAmount: BigInt!
  remainingAmount: BigInt!
  filledAmount: BigInt!
  totalFilled: BigInt!
  cancelledAmount: BigInt!
  pricePerPod: Int!
  maxHarvestableIndex: BigInt!
  mode: Int!
  transaction: Transaction
}

type PodOrder @entity {
  id: ID!
  farmer: Farmer!
  createdAt: BigInt!
  updatedAt: BigInt!
  status: String!
  amount: BigInt!
  filledAmount: BigInt!
  maxPlaceInLine: BigInt!
  pricePerPod: Int!
  transaction: Transaction
}

type PodFill @entity {
  id: ID!
  podMarketplace: PodMarketplace!
  listing: PodListing
  order: PodOrder
  from: String!
  to: String!
  amount: BigInt!
  index: BigInt!
  start: BigInt!
  transaction: Transaction
}

type Transaction @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  from: Bytes!
  to: Bytes
}

##################################
##### Fertilizer Entities #####
##################################

# Global Fertilizer state for tracking
type Fertilizer @entity {
  id: ID!
  totalSupply: BigInt!
  tokens: [FertilizerToken!]! @derivedFrom(field: "fertilizer")
}

# Id-level Fertilizer entity
type FertilizerToken @entity {
  id: ID!
  fertilizer: Fertilizer!
  supply: BigInt!
  humidity: BigDecimal!
  endBpf: BigInt!
  startBpf: BigInt!
  season: Int!
  balances: [FertilizerBalance!]! @derivedFrom(field: "fertilizerToken")
}

# 
type FertilizerBalance @entity {
  id: ID!
  fertilizerToken: FertilizerToken!
  farmer: Farmer!
  amount: BigInt!
}

##################################
##### Event-Level Data #####
##################################

### We need to add these in

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.
"""

interface Event {
  " { Event type }-{ Transaction hash }-{ Log index } "
  id: ID!
  " Transaction hash of the transaction that emitted this event "
  hash: String!
  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!
  " The protocol this transaction belongs to "
  protocol: Beanstalk!
  " Block number of this event "
  blockNumber: BigInt!
  " Timestamp of this event "
  timestamp: BigInt!
}

type PodTransfer implements Event @entity {
  " podtransfer-{ Transaction hash }-{ Log index } "
  id: ID!
  " Transaction hash of the transaction that emitted this event "
  hash: String!
  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!
  " The protocol this transaction belongs to "
  protocol: Beanstalk!
  " Address that received the pods "
  to: String!
  " Address that sent the pods "
  from: String!
  " Index of the pods sent"
  index: BigInt!
  " Total pods being sent"
  pods: BigInt!
  " Block number of this event "
  blockNumber: BigInt!
  " Timestamp of this event "
  timestamp: BigInt!
}

type Harvest implements Event @entity {
  "harvest-{ Transaction hash }-{ Log index } "
  id: ID!
  " Transaction hash of the transaction that emitted this event "
  hash: String!
  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!
  " The protocol this transaction belongs to "
  protocol: Beanstalk!
  " Address harvesting beans "
  farmer: String!
  " Plots being harvested "
  plots: [BigInt!]!
  " Total beans harvested "
  beans: BigInt!
  " Block number of this event "
  blockNumber: BigInt!
  " Timestamp of this event "
  timestamp: BigInt!
  
}

type Chop implements Event @entity {
  "chop-{ Transaction hash }-{ Log index }"
  id: ID!
  " Transaction hash of the transaction that emitted this event "
  hash: String!
  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!
  " The protocol this transaction belongs to "
  protocol: Beanstalk!
  " Address chopping "
  farmer: String!
  " Unripe token being chopped "
  unripe: Token!
  " Amount being chopped"
  amount: BigInt!
  " Underlying token "
  underlying: Token!
  " Block number of this event "
  blockNumber: BigInt!
  " Timestamp of this event "
  timestamp: BigInt!
}

type Incentive implements Event @entity {
  "incentive-{ Transaction hash }-{ Log index }"
  id: ID!
  " Transaction hash of the transaction that emitted this event "
  hash: String!
  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!
  " The protocol this transaction belongs to "
  protocol: Beanstalk!
  " Address incentivized "
  caller: String!
  " Amount minted as incentive"
  amount: BigInt!
  " Block number of this event "
  blockNumber: BigInt!
  " Timestamp of this event "
  timestamp: BigInt!
}

type Reward implements Event @entity {
  "reward-{ Transaction hash }-{ Log index }"
  id: ID!
  " Transaction hash of the transaction that emitted this event "
  hash: String!
  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!
  " The protocol this transaction belongs to "
  protocol: Beanstalk!
  " Season of reward "
  season: Int!
  " Amount minted to pod line"
  toField: BigInt!
  " Amount minted to silo"
  toSilo: BigInt!
  " Amount minted to fertilizer"
  toFertilizer: BigInt!
  " Block number of this event "
  blockNumber: BigInt!
  " Timestamp of this event "
  timestamp: BigInt!
}

type MetapoolOracle implements Event @entity {
  "metapoolOracle-{ Transaction hash }-{ Log index }"
  id: ID!
  " Transaction hash of the transaction that emitted this event "
  hash: String!
  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!
  " The protocol this transaction belongs to "
  protocol: Beanstalk!
  " Season of oracle "
  season: Int!
  " DeltaB for season"
  deltaB: BigInt!
  " Cumulative balance A"
  balanceA: BigInt!
  " Cumulative balance B"
  balanceB: BigInt!
  " Block number of this event "
  blockNumber: BigInt!
  " Timestamp of this event "
  timestamp: BigInt!
}

type AddDeposit implements Event @entity {
  "addDeposit-{ Transaction hash }-{ Log index }"
  id: ID!
  " Transaction hash of the transaction that emitted this event "
  hash: String!
  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!
  " The protocol this transaction belongs to "
  protocol: Beanstalk!
  " Account removing deposit"
  account: String!
  " Token removed"
  token: String!
  " Season of deposit removed "
  season: Int!
  " Amount of token removed "
  amount: BigInt!
  " BDV of the deposit "
  bdv: BigInt!
  " Block number of this event "
  blockNumber: BigInt!
  " Timestamp of this event "
  timestamp: BigInt!
}

type RemoveDeposit implements Event @entity {
  "removeDeposit-{ Transaction hash }-{ Log index }"
  id: ID!
  " Transaction hash of the transaction that emitted this event "
  hash: String!
  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!
  " The protocol this transaction belongs to "
  protocol: Beanstalk!
  " Account removing deposit"
  account: String!
  " Token removed"
  token: String!
  " Season of deposit removed "
  season: Int!
  " Amount of token removed "
  amount: BigInt!
  " Block number of this event "
  blockNumber: BigInt!
  " Timestamp of this event "
  timestamp: BigInt!
}

type StalkChange implements Event @entity {
  "stalkChange-{ Transaction hash }-{ Log index }"
  id: ID!
  " Transaction hash of the transaction that emitted this event "
  hash: String!
  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!
  " The protocol this transaction belongs to "
  protocol: Beanstalk!
  " Account removing deposit"
  account: String!
  " Token removed"
  delta: BigInt!
  " Season when the change happened "
  season: Int!
  " Block number of this event "
  blockNumber: BigInt!
  " Timestamp of this event "
  timestamp: BigInt!
}

type SeedChange implements Event @entity {
  "seedChange-{ Transaction hash }-{ Log index }"
  id: ID!
  " Transaction hash of the transaction that emitted this event "
  hash: String!
  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!
  " The protocol this transaction belongs to "
  protocol: Beanstalk!
  " Account removing deposit"
  account: String!
  " Token removed"
  delta: BigInt!
  " Season when the change happened "
  season: Int!
  " Block number of this event "
  blockNumber: BigInt!
  " Timestamp of this event "
  timestamp: BigInt!
}
