# Some items included in this schema come from the Messari Generic Schema
# Subgraph Schema: Generic
# Version: 1.3.0
# See https://github.com/messari/subgraphs/blob/master/docs/Schema.md for details

enum Network {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BOBA
  BSC # aka BNB Chain
  CELO
  COSMOS
  CRONOS
  MAINNET # Ethereum Mainnet
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC # aka Polygon
  XDAI # aka Gnosis Chain
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
  # Will add more
}

type Token @entity {
  " Smart contract address of the token "
  id: ID!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " Optional field to track the price of a token, mostly for caching purposes "
  lastPriceUSD: BigDecimal

  " Optional field to track the block number of the last token price "
  lastPriceBlockNumber: BigInt
}

enum RewardTokenType {
  " For reward tokens awarded to LPs/lenders "
  DEPOSIT

  " For reward tokens awarded to borrowers "
  BORROW
}

type RewardToken @entity {
  " { Reward token type }-{ Smart contract address of the reward token } "
  id: ID!

  " Reference to the actual token "
  token: Token!

  " The type of the reward token "
  type: RewardTokenType!
}

#############################
##### Protocol Metadata #####
#############################

type Beanstalk @entity {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " The type of protocol (e.g. DEX, Lending, Yield, etc) "
  type: ProtocolType!

  " Timestamp of the latest DiamondCut call "
  lastUpgrade: BigInt!
  
  " Season specific data "
  seasons: [Season!]! @derivedFrom(field: "beanstalk")
  
  " Silo level data "
  silo: Silo! @derivedFrom(field: "beanstalk")

  " Lastest harvestable index for pods"
  harvestableIndex: BigInt!
}

# An entity that holds season level data
type Season @entity {
  " Season Number" 
  id: ID!
  
  " Beanstalk Contract Address "
  beanstalk: Beanstalk!

  " Season number in Int form for sorting "
  season: Int!

  " Block timestamp when sunrise was called "
  timestamp: BigInt!
  
  " TWAP that was used for field processing during sunrise "
  twap: BigDecimal!

  " Total Bean supply "
  beans: BigInt!

  " Amount of beans minted for the season "
  deltaBeans: BigInt!

  " New harvestable index for the season "
  harvestableIndex: BigInt!
}

type Silo @entity {
  id: ID!
  beanstalk: Beanstalk!
  totalValueLockedUSD: BigDecimal!
  totalDepositedBDV: BigInt!
  totalStalk: BigInt!
  totalSeeds: BigInt!
  totalBeanMints: BigInt!
  hourlySnapshots: [SiloHourlySnapshots!]! @derivedFrom(field: "silo")
  dailySnapshots: [SiloDailySnapshots!]! @derivedFrom(field: "silo")
}

type SiloHourlySnapshots @entity {
  id: ID!
  season: Int!
  silo: Silo!
  totalValueLockedUSD: BigDecimal!
  totalDepositedBDV: BigInt!
  totalStalk: BigInt!
  totalSeeds: BigInt!
  totalBeanMints: BigInt!
  cumulativeDepositedUSD: BigDecimal!
  hourlyDepositedUSD: BigDecimal!
  hourlyDepositedBDV: BigInt!
  hourlyWithdrawnBDV: BigInt!
  hourlyClaimableBDV: BigInt!
  hourlyStalkDelta: BigInt!
  hourlySeedsDelta: BigInt!
  hourlyBeanMints: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type SiloDailySnapshots @entity {
  id: ID!
  season: Int!
  silo: Silo!
  totalValueLockedUSD: BigDecimal!
  totalDepositedBDV: BigInt!
  totalStalk: BigInt!
  totalSeeds: BigInt!
  totalBeanMints: BigInt!
  cumulativeDepositedUSD: BigDecimal!
  dailyDepositedUSD: BigDecimal!
  dailyDepositedBDV: BigInt!
  dailyWithdrawnBDV: BigInt!
  dailyClaimableBDV: BigInt!
  dailyStalkDelta: BigInt!
  dailySeedsDelta: BigInt!
  dailyBeanMints: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type SiloAsset @entity {
  id: ID!
  silo: Silo!
  token: Token!
  totalValueLockedUSD: BigDecimal!
  totalDepositedAmount: BigInt!
  cumulativeDepositedUSD: BigDecimal!
  totalStalk: BigInt!
  totalSeeds: BigInt!
  hourlySnapshots: [SiloAssetHourlySnapshot!]! @derivedFrom(field: "siloAsset")
  dailySnapshots: [SiloAssetDailySnapshot!]! @derivedFrom(field: "siloAsset")
}

type SiloAssetHourlySnapshot @entity {
  id: ID!
  season: Int!
  siloAsset: SiloAsset!
  totalValueLockedUSD: BigDecimal!
  totalDepositedAmount: BigInt!
  totalStalk: BigInt!
  totalSeeds: BigInt!
  cumulativeDepositedUSD: BigDecimal!
  hourlyDepositedUSD: BigDecimal!
  hourlyDepositedAmount: BigInt!
  hourlyWithdrawnAmount: BigInt!
  hourlyStalkDelta: BigInt!
  hourlySeedsDelta: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type SiloAssetDailySnapshot @entity {
  id: ID!
  season: Int!
  siloAsset: SiloAsset!
  totalValueLockedUSD: BigDecimal!
  totalDepositedAmount: BigInt!
  totalStalk: BigInt!
  totalSeeds: BigInt!
  cumulativeDepositedUSD: BigDecimal!
  dailyDepositedUSD: BigDecimal!
  dailyDepositedAmount: BigInt!
  dailyWithdrawnAmount: BigInt!
  dailyStalkDelta: BigInt!
  dailySeedsDelta: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type Field @entity {
  " Contract address for this field "
  id: ID!
  beanstalk: Beanstalk!
  weather: Int!
  totalNumberOfSowers: Int!
  totalNumberOfSows: Int!
  totalSownBeans: BigInt!
  plotIndexes: [BigInt!]!
  totalPods: BigInt!
  totalHarvestablePods: BigInt!
  totalHarvestedPods: BigInt!
  totalSoil: BigInt!
  podRate: BigDecimal!
  hourlySnapshots: [FieldHourlySnapshot!]! @derivedFrom(field: "field")
  dailySnapshots: [FieldDailySnapshot!]! @derivedFrom(field: "field")
}

type FieldHourlySnapshot @entity {
  id: ID!
  field: Field!
  season: Int!
  weather: Int!
  numberOfSowers: Int!
  totalNumberOfSowers: Int!
  numberOfSows: Int!
  totalNumberOfSows: Int!
  sownBeans: BigInt!
  totalSownBeans: BigInt!
  newPods: BigInt!
  totalPods: BigInt!
  newHarvestablePods: BigInt!
  totalHarvestablePods: BigInt!
  newSoil: BigInt!
  totalSoil: BigInt!
  podRate: BigDecimal!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type FieldDailySnapshot @entity {
  id: ID!
  field: Field!
  season: Int!
  weather: Int!
  numberOfSowers: Int!
  totalNumberOfSowers: Int!
  numberOfSows: Int!
  totalNumberOfSows: Int!
  sownBeans: BigInt!
  totalSownBeans: BigInt!
  newPods: BigInt!
  totalPods: BigInt!
  newHarvestablePods: BigInt!
  totalHarvestablePods: BigInt!
  newSoil: BigInt!
  totalSoil: BigInt!
  podRate: BigDecimal!
  blockNumber: BigInt!
  timestamp: BigInt!
}

##################################
##### Event-Level Data #####
##################################

### We need to add these in


#An event is any user action that occurs in a protocol. Generally, they are Ethereum events
#emitted by a function in the smart contracts, stored in transaction receipts as event logs.
#However, some user actions of interest are function calls that don't emit events. For example,
#the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
#store them as events, although they are not technically Ethereum events emitted by smart
#contracts.
