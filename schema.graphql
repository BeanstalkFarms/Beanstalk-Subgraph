# Some items included in this schema come from and are inspired by the Messari Generic Schema

enum MarketStatus {
  ACTIVE
  FILLED
  FILLED_PARTIAL
  CANCELLED
  CANCELLED_PARTIAL
  EXPIRED
}

type Plot @entity {
  ""
  id: ID!
  
  ""
  listing: PodListing
}

type PodListing @entity {
  ######################## Identifiers ########################

  """
  The PodListing ID is a unique subgraph ID: `{account}-{index}"

  The on-chain identifier for a PodListing is the `index`.
  """
  id: ID!

  "The Farmer that created the PodListing."
  account: String!

  ######################## Configuration ########################

  """
  The absolute index of the listed Plot in the Pod Line.
 
  Measured from the front, so the Listing contains all Pods between
  (index) and (index + totalAmount).
 
  An example where the podLine is 50,000 but the index is 150,000:
     0         the first Pod issued
     100,000   harvestableIndex
     150,000   index
  """
  index: BigInt!

  """
  The position within the Plot from which to sell Pods.

  0 <= `start` <= (plot size - `amount`)
  """
  start: BigInt!

  "Where Beans are sent when the PodListing is Filled. See `FarmToMode`."
  mode: Int!

  ######################## Constraints ########################

  """
  When the `harvestableIndex` reaches this number, the Listing becomes EXPIRED.
  """
  maxHarvestableIndex: BigInt!

  "Minimum number of Beans required to perform a Fill."
  minFillAmount: BigInt!

  ######################## Pricing ########################

  """
  The Pricing Type states whether this PodListing uses FIXED or DYNAMIC pricing.

  null = V1 FIXED  = use `pricePerPod`
  0    = V2 FIXED  = use `pricePerPod`
  1    = V2 DYNAMIC = use `pricingFunction`
  """
  pricingType: Int
  
  """
  [V1] The FIXED price per Pod denominated in Beans.

  Ex. `pricePerPod = 10000` indicates a price of 0.01 Beans per Pod.

  If `pricingType = 1`, this field is set to `0` and should be ignored.
  """
  pricePerPod: Int!

  """
  [V2] The FIXED or DYNAMIC pricing function, encoded as bytes.

  This must be decoded client-side, see `LibPolynomial.sol` for more info.
  """
  pricingFunction: Bytes

  ######################## Amounts [Relative to Original] ########################

  podsTotal: BigInt!
  podsFilled: BigInt!
  podsRemaining: BigInt!
  podsCancelled: BigInt!

  ######################## Metadata ########################

  "Current market status of listing"
  status: MarketStatus!
  
  "Timestamp of PodListing creation."
  createdAt: BigInt!

  "Timestamp of last update to this PodListing, including Fills and Cancellations."
  updatedAt: BigInt!

  "Transaction hash when this PodListing entity was created."
  creationHash: String!
}

type PodOrder @entity {
  ######################## Identifiers ########################

  """
  The PodOrder ID matchces the `id` stored on-chain:

  `keccak256(abi.encodePacked(account, pricePerPod, maxPlaceInLine, minFillAmount))`
  """
  id: ID!

  "The Farmer that created the Pod Order."
  account: String!

  ######################## Constraints ########################

  """
  The Farmer is willing to buy any Pod that is before maxPlaceInLine at pricePerPod.
  As the Pod Line moves, this value stays the same because new Pods meet the criteria.
  """
  maxPlaceInLine: BigInt!

  "Minimum number of Pods required to perform a Fill."
  minFillAmount: BigInt!

  ######################## Pricing ########################

  """
  The Pricing Type states whether this PodOrder uses FIXED or DYNAMIC pricing.

  null = V1 FIXED  = use `pricePerPod`
  0    = V2 FIXED  = use `pricePerPod`
  1    = V2 DYNAMIC = use `pricingFunction`
  """
  pricingType: Int

  """
  [V1] The FIXED price per Pod denominated in Beans.

  Ex. `pricePerPod = 10000` indicates a price of 0.01 Beans per Pod.

  If `pricingType = 1`, this field is initialized to `0` and should be ignored.
  """
  pricePerPod: Int!

  """
  [V2] The FIXED or DYNAMIC pricing function, encoded as bytes.

  This must be decoded client-side, see `LibPolynomial.sol` for more info.

  null    = V1 FIXED    = use `pricePerPod`
  "0x"    = V2 FIXED    = use `pricePerPod`
  "0x..." = V2 DYNAMIC  = use `pricingFunction`
  """
  pricingFunction: Bytes

  ######################## Amounts ########################

  """
  The original number of Pods requested by this PodOrder.

  Does NOT change as Fills occur.
  Not deterministic for PodOrders with pricingType = DYNAMIC.

  If pricingType = FIXED:
    Set to the number of Pods which can be purchased by the Order.
    If FIXED (V1): `amount` field emitted in PodOrderCreated. 
    If FIXED (V2): `amount / pricePerPod` fields emitted in PodOrderCreated.

  If pricingType = DYNAMIC:
    Set to `0`. The number of Pods that will be provided is unknown, since
    the price is calculated based on the place in line of supplied Pods.
  """
  podAmount: BigInt!

  """
  The current number of Pods that have been purchased by this PodOrder.

  Increases during each subsequent Fill.
  If pricingType = FIXED: `0 <= podAmountFilled <= podAmount`
  If pricingType = DYNAMIC: No constraint, since `podAmount` is unknown.

  Upon PodOrder cancellation, this value is locked.
  """
  podAmountFilled: BigInt!

  """
  The original number of Beans locked in the PodOrder.

  Does NOT change as Fills occur.
  Always deterministic, since the Farmer must lock Beans for PodOrder fulfillment.

  If FIXED (V1): `amount * pricePerPod` fields emitted in PodOrderCreated.
  If FIXED (V2): `amount` field emitted in PodOrderCreated.
  If DYNAMIC (V2): `amount` field emitted in PodOrderCreated.
  """
  beanAmount: BigInt!

  """
  The current number of Beans spent to acquire Pods.
  
  Increases during each subsequent Fill:
  `0 <= beanAmountFilled <= beanAmount`

  Upon PodOrder cancellation, this value is locked.
  """
  beanAmountFilled: BigInt!

  ######################## Metadata ########################

  "Current status of order."
  status: MarketStatus!

  "Timestamp of PodOrder creation."
  createdAt: BigInt!

  "Timestamp of last PodOrder update. Changes when a PodOrder is Filled or Cancelled."
  updatedAt: BigInt!

  "Transaction hash when this PodOrder entity was created."
  creationHash: String!
}